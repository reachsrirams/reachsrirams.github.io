<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Sriram S - Innervoice</title>
    <link>http://reachsrirams.github.io/blogs/</link>
    <description>Recent content on Sriram S - Innervoice</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Sun, 07 Jan 2018 18:18:26 +0000</lastBuildDate>
    
        <atom:link href="http://reachsrirams.github.io/blogs/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Goals for the first half of 2018</title>
      <link>http://reachsrirams.github.io/blogs/2018/01/07/goals-for-the-first-half-of-2018/</link>
      <pubDate>Sun, 07 Jan 2018 18:18:26 +0000</pubDate>
      
      <guid>http://reachsrirams.github.io/blogs/2018/01/07/goals-for-the-first-half-of-2018/</guid>
      
        <description>&lt;p&gt;A very happy new year to the readers of my blogs. It is time for the semi-annual update about my blogging and learning goals. And I must say there are some interesting goals that I conjuring up for myself.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h2 id=&#34;status-of-2017-second-half-goals&#34;&gt;Status of 2017 second half goals&lt;/h2&gt;

&lt;p&gt;I had set a goal to write 3 blogs in the second half of 2017 without specifically talking about what those blogs were. The reason was that I was experimenting with technologies like Docker and Cassandra. So I could plan specific topics related to these upfront.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Score: &lt;sup&gt;5&lt;/sup&gt;&amp;frasl;&lt;sub&gt;10&lt;/sub&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Status:&lt;/strong&gt; In the end, I wrote two blogs about Docker. For 2 out of a goal 3 should fetch me better score, I really feel I could have written one more blog. I was split between going further deeper in Docker related to technologies or skim the surface of several other technologies. Eventually I have decided to go breadth-first for reasons best known to me.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;goals-for-first-half-of-2018&#34;&gt;Goals for first half of 2018&lt;/h2&gt;

&lt;p&gt;For the first half of 2018 I plan to write couple of blogs &lt;strong&gt;at most.&lt;/strong&gt; This will allow me to spend time on cleaning up my existing blogs &lt;strong&gt;- a long overdue task&lt;/strong&gt;. Since I need to spend more time on a critical activity, I have not planned for specific topics as yet.&lt;/p&gt;

&lt;p&gt;The main goal can be summarized as &lt;strong&gt;Blog rationalization&lt;/strong&gt;. And I will describe what I am planning to do. Currently I have two blogs one active and the other dead for all practical purposes. These blogs are hosted through a paid account at a Web Hosting provider but I also use Google services to host my mail for the same domains. The goal is to consolidate and also explore newer options to host my blogs.&lt;/p&gt;

&lt;h3 id=&#34;blog-rationalization-plan&#34;&gt;Blog Rationalization Plan&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;My &lt;a href=&#34;http://www.srirams.org/&#34;&gt;personal blog at www.srirams.org&lt;/a&gt; is in a moribund state. I have hardly blogged at a personal level and I strongly feel that Facebook is a better medium for personal posts.

&lt;ul&gt;
&lt;li&gt;I will be shutting this blog down very soon.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;My &lt;a href=&#34;http://www.innervoice.in/blogs/&#34;&gt;&lt;em&gt;technical blog&lt;/em&gt; at www.innervoice.in/blogs&lt;/a&gt; is quite active. In fact some of the blogs appear at the top in Google search. The interesting aspect about this domain is that the blogs are hosted on a Hosting provider platform but my mails are managed using Google Suite (GSuite) for Business. The GSuite includes applications like Google Sites that can be used for blogging. Though not a ideal replacement for WordPress blog platform (that I use today), GSuite meets most of my needs as a solo and relatively infrequent blogger. Another alternative to using GSuite is to use a _paid account_ at WordPress.com.

&lt;ul&gt;
&lt;li&gt;To reduce account management overheads (security, SW updates, passwords) I want to migrate to GSuite Sites or WordPress.com based blogs. I already have GSuite paid account so WordPress.com will incur additional cost.&lt;/li&gt;
&lt;li&gt;Migration to GSuite will require considerable work since I need to migrate all the existing links. It will be a time consuming process and something I am determined to do. I also need to be careful about the &lt;em&gt;loss of functionality&lt;/em&gt; in this migration.&lt;/li&gt;
&lt;li&gt;I have paid my Web Hosting provider for 1 more year &amp;#8211; so I do have some time but the migration of blogs, their URLs without impacting search ranking needs to be carefully done.&lt;/li&gt;
&lt;li&gt;Overall the goal is clear &amp;#8211; get away from my Web Hosting provider. And this requires regular weekend work, reading and execution.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;The final aspect of the &lt;em&gt;Blog rationalization&lt;/em&gt; is to &lt;strong&gt;start blogging on LinkedIn&lt;/strong&gt;. I have been blogging about technical topics whereas my work experience is more on the managerial side. Moreover writing about non-technical yet professional topics will challenge my writing skills more. I will be posting about this on my LinkedIn account soon.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Conclusion&lt;/strong&gt; - as you can see I am trying to consolidate the various online blogging platforms and align them to meet my future plans. &lt;strong&gt;You can really help me&lt;/strong&gt; by sharing ideas and suggestions about Medium, other online blogging platforms etc. Or sharing tools that will help me with the rationalization.&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>Docker Compose with nginx and NodeJS</title>
      <link>http://reachsrirams.github.io/blogs/2017/11/26/docker-compose-nginx-nodejs/</link>
      <pubDate>Sun, 26 Nov 2017 05:15:30 +0000</pubDate>
      
      <guid>http://reachsrirams.github.io/blogs/2017/11/26/docker-compose-nginx-nodejs/</guid>
      
        <description>&lt;p&gt;If you are a follower of this blog, you might have read about &lt;a href=&#34;http://www.innervoice.in/blogs/2017/11/19/using-docker-nginx-nodejs/&#34;&gt;Using Docker with nginx and NodeJS&lt;/a&gt;. In this blog, I will discuss the code to build  the two containers using Docker Compose. Finally, I will highlight an important capability of Docker that I learnt in this exercise. The source code being referred in this blog is &lt;a href=&#34;https://goo.gl/sBmSt3&#34;&gt;available on GitHub&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;Acknowledgement: I was inspired by &lt;a href=&#34;http://schempy.com/2015/08/25/docker_nginx_nodejs/&#34;&gt;this blog&lt;/a&gt; and wanted to take it further using Docker Compose.&lt;/p&gt;

&lt;h3 id=&#34;docker-compose-background&#34;&gt;Docker Compose - background&lt;/h3&gt;

&lt;p&gt;Docker Compose is a tool to build and coordinate multi-container applications. You use a YAML file to define different containers and any relationship between them. Docker Compose uses this YAML file to start those containers. We can continue to use the Dockerfile as a building block for Docker Compose.&lt;/p&gt;


&lt;link rel=&#34;stylesheet&#34; href=&#34;http://reachsrirams.github.io/blogs/blogs/css/hugo-easy-gallery.css&#34; /&gt;
&lt;div class=&#34;box&#34; &gt;
  &lt;figure class=&#34;center&#34; itemprop=&#34;associatedMedia&#34; itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
    &lt;div class=&#34;img&#34;&gt;
      &lt;img itemprop=&#34;thumbnail&#34; src=&#34;http://reachsrirams.github.io/blogs/blogs/images/2017/docker-compose-yaml.png&#34; alt=&#34;Docker Compose YAML&#34;/&gt;
    &lt;/div&gt;
    &lt;a href=&#34;http://reachsrirams.github.io/blogs/blogs/images/2017/docker-compose-yaml.png&#34; itemprop=&#34;contentUrl&#34;&gt;&lt;/a&gt;
      &lt;figcaption&gt;
          &lt;p&gt;Docker Compose YAML&lt;/p&gt;
      &lt;/figcaption&gt;
  &lt;/figure&gt;
&lt;/div&gt;


&lt;p&gt;As you can see from the GitHub repository, I have two containers defined in my &lt;em&gt;docker-compose.yml&lt;/em&gt; file. The YAML file shows that the two &amp;ldquo;services&amp;rdquo; are &lt;em&gt;built&lt;/em&gt; using the Dockerfile specified for each of the containers. The steps in two Dockerfiles are fairly straightforward. They create an Ubuntu based container, install the necessary software packages and copy a few files to configure nginx and NodeJS.&lt;/p&gt;

&lt;h3 id=&#34;nginx-proxy&#34;&gt;nginx Proxy&lt;/h3&gt;

&lt;p&gt;In the previous blog, we showed that nginx is used to serve static HTML files and to forward (proxy) the API requests to NodeJS. Here is the screenshot of the file I use for nginx configuration.&lt;/p&gt;



&lt;div class=&#34;box&#34; &gt;
  &lt;figure class=&#34;center&#34; itemprop=&#34;associatedMedia&#34; itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
    &lt;div class=&#34;img&#34;&gt;
      &lt;img itemprop=&#34;thumbnail&#34; src=&#34;http://reachsrirams.github.io/blogs/blogs/images/2017/nginx-conf.png&#34; alt=&#34;Docker Compose YAML&#34;/&gt;
    &lt;/div&gt;
    &lt;a href=&#34;http://reachsrirams.github.io/blogs/blogs/images/2017/nginx-conf.png&#34; itemprop=&#34;contentUrl&#34;&gt;&lt;/a&gt;
      &lt;figcaption&gt;
          &lt;p&gt;Docker Compose YAML&lt;/p&gt;
      &lt;/figcaption&gt;
  &lt;/figure&gt;
&lt;/div&gt;


&lt;p&gt;This config file configures nginx to listen on port 80 for HTTP requests. If the requests comes to a root folder &amp;amp;&amp;ldquo;/&amp;rdquo;, it is redirected to the Application represented by &amp;ldquo;/app&amp;rdquo; on the same &lt;em&gt;host&lt;/em&gt;. However if the request is for API represented by &amp;ldquo;/app/api&amp;rdquo; URI, then nginx will &lt;em&gt;proxy&lt;/em&gt; the request to &amp;ldquo;API Server&amp;rdquo; on port 9090. If you look at the Dockerfile for the NodeJS container, you will see that it is listening on port 9090. The key thing here is the keyword &lt;em&gt;apiserver&lt;/em&gt;. &lt;strong&gt;How does nginx know what is the IP address for the NodeJS container?&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&#34;docker-links&#34;&gt;Docker - links&lt;/h3&gt;

&lt;p&gt;Links are important concepts that help Docker containers communicate with one another. It is a good practice to use host names instead of hard-coding IP addresses when one container needs to communicate with another. But host names and IP addresses have to be mapped automatically. This is where the concept of Link comes into picture.&lt;/p&gt;

&lt;p&gt;The YAML file has a stanza for the GUI container as follows:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-YAML&#34; data-lang=&#34;YAML&#34;&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-YAML&#34; data-lang=&#34;YAML&#34;&gt;links&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;api&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;apiserver&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;The keyword, &lt;em&gt;api,&lt;/em&gt; refers to the &amp;ldquo;container&amp;rdquo; mentioned earlier in the YAML file.&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-YAML&#34; data-lang=&#34;YAML&#34;&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-YAML&#34; data-lang=&#34;YAML&#34;&gt;services&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;api&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;build&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;api-container&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;The effect of this &lt;em&gt;link&lt;/em&gt; is that Docker will take the IP address of the container named &lt;em&gt;api&lt;/em&gt; and map it to the host name &lt;em&gt;apiserver&lt;/em&gt; inside the GUI container. The &lt;em&gt;/etc/hosts&lt;/em&gt; file is used for this purpose.&lt;/p&gt;

&lt;p&gt;In  real world scenarios it is common to have container distributed across servers in a datacenter. Therefore IP address may not be known upfront and may also change over the course of time. Docker Links provide a crucial capability to ensure that containers are able to communicate with one another using host names and let Docker &lt;em&gt;orchestrate&lt;/em&gt; the mapping of host names to IP addresses.&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>Using Docker with nginx and NodeJS</title>
      <link>http://reachsrirams.github.io/blogs/2017/11/19/using-docker-nginx-nodejs/</link>
      <pubDate>Sun, 19 Nov 2017 05:56:48 +0000</pubDate>
      
      <guid>http://reachsrirams.github.io/blogs/2017/11/19/using-docker-nginx-nodejs/</guid>
      
        <description>&lt;p&gt;The best way to learn a new technology is by doing some hands-on practice or exercise. In order to learn the basics of Docker, I was scouting for a problem and the one that captured my imagination was how to use Docker for handling static web pages and dynamic REST APIs. In this 2-part blog, I will describe the problem and the solution first and then show how I implemented the solution using Docker.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h3 id=&#34;problem-description&#34;&gt;Problem description&lt;/h3&gt;

&lt;p&gt;Modern web-based applications are built using static or dynamic web pages. And these web pages in turn invoke RESTful APIs to fetch data or perform some operations on the backend. The important aspect here is that both the UI pages as well as RESTful APIs are transported over HTTP/S. So we effectively need web server(s) to serve UI pages as well as RESTful APIs.&lt;/p&gt;

&lt;h3 id=&#34;solution-overview&#34;&gt;Solution overview&lt;/h3&gt;

&lt;p&gt;While standard web servers can serve static HTML pages, the REST API processing requires web servers to support programming languages. Depending on the language the web servers for handling REST APIs can by built using NodeJS (JavaScript) or Bottle/Flask (Python) for example. But tools like NodeJS and Bottle etc do not support standard web server features like caching, proxying etc, which are useful for static web pages. So the common solution is to use both regular web servers like apache or nginx (proxy) for web pages and use NodeJS etc for REST APIs.&lt;/p&gt;

&lt;h3 id=&#34;solution-in-depth-deploying-using-docker&#34;&gt;Solution in depth - deploying using Docker&lt;/h3&gt;

&lt;p&gt;For this Docker learning exercise we will deploy two containers - one running nginx and another running NodeJS. The ngnix server will handle &lt;em&gt;all&lt;/em&gt; incoming HTTP/S requests. However it will &lt;em&gt;proxy&lt;/em&gt; the REST API requests to the NodeJS process and handle the UI pages itself.&lt;/p&gt;


&lt;link rel=&#34;stylesheet&#34; href=&#34;http://reachsrirams.github.io/blogs/blogs/css/hugo-easy-gallery.css&#34; /&gt;
&lt;div class=&#34;box&#34; &gt;
  &lt;figure class=&#34;center&#34; itemprop=&#34;associatedMedia&#34; itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
    &lt;div class=&#34;img&#34;&gt;
      &lt;img itemprop=&#34;thumbnail&#34; src=&#34;http://reachsrirams.github.io/blogs/blogs/images/2017/Docker-nginx-NodeJS-1-1.png&#34; /&gt;
    &lt;/div&gt;
    &lt;a href=&#34;http://reachsrirams.github.io/blogs/blogs/images/2017/Docker-nginx-NodeJS-1-1.png&#34; itemprop=&#34;contentUrl&#34;&gt;&lt;/a&gt;
  &lt;/figure&gt;
&lt;/div&gt;


&lt;h3 id=&#34;the-code&#34;&gt;The Code&lt;/h3&gt;

&lt;p&gt;The source code for this learning exercise can be found on &lt;a href=&#34;https://goo.gl/sBmSt3&#34;&gt;my Github account&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I have used Docker Compose to &lt;em&gt;orchestrate&lt;/em&gt; the two containers. The &lt;em&gt;gui-container&lt;/em&gt; on the Github account implements the nginx server and the &lt;em&gt;api-container&lt;/em&gt; implements the NodeJS container. In the next installment of the blog, I will describe the code and show how it implements the solution mentioned above. I will also describe one interesting and useful feature of Docker that I learnt in this process.&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>Goals for the second half of 2017</title>
      <link>http://reachsrirams.github.io/blogs/2017/07/07/goals-2h-2017/</link>
      <pubDate>Fri, 07 Jul 2017 18:27:16 +0000</pubDate>
      
      <guid>http://reachsrirams.github.io/blogs/2017/07/07/goals-2h-2017/</guid>
      
        <description>&lt;p&gt;The customary update about my blogging and learning goals is here.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h2 id=&#34;status-of-2017-first-half-goals&#34;&gt;Status of 2017 first half goals&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Enhance my OpenStack install scripts for &lt;em&gt;Newton&lt;/em&gt; and &lt;em&gt;Ocata&lt;/em&gt; release. Newton release is already out and Ocata should release around May-mid

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Score: &lt;sup&gt;9&lt;/sup&gt;&amp;frasl;&lt;sub&gt;10&lt;/sub&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Status&lt;/strong&gt;: I completed the scripting for both Newton and Ocata release. The reason for 9 (instead of 10) is that there are 1-2 really minor issues that I need to fix.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;goals-for-the-second-half-of-2017&#34;&gt;Goals for the second half of 2017&lt;/h2&gt;

&lt;p&gt;I am planning to explore newer aspects of OpenStack along with some completely new technologies in the next 6 months. With that in mind, I am not planning any specific goals for the 2nd half of 2017. However my experience shows that learning is more deep rooted and satisfying if I blog about different topics. Therefore &lt;strong&gt;my goal for the second half of 2017 is to write 3 blogs&lt;/strong&gt;. The exact topics are not known as of today.&lt;/p&gt;

&lt;p&gt;I also commit to fixing any errors or bugs in my OpenStack install scripts. The Pike release will sometime around end of August 2017. &lt;strong&gt;I will take on a stretch goal to support Pike release install scripts before the end of the year&lt;/strong&gt;.&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>Ocata release install scripts for OpenStack</title>
      <link>http://reachsrirams.github.io/blogs/2017/06/03/ocata-openstack-install/</link>
      <pubDate>Sat, 03 Jun 2017 02:39:12 +0000</pubDate>
      
      <guid>http://reachsrirams.github.io/blogs/2017/06/03/ocata-openstack-install/</guid>
      
        <description>

&lt;p&gt;Ocata is the most recent release of OpenStack.  I would like to share scripts that can be used to install the &lt;a href=&#34;https://goo.gl/A8JmlO&#34;&gt;Ocata is the most recent release of OpenStack.  I would like to share scripts that can be used to install the&lt;/a&gt; server as per the installation guide. This is a collection of scripts that should help you get going with OpenStack&amp;rsquo;s latest release. I have been developing these scripts to help me with my blogging and personal learning projects&lt;/p&gt;

&lt;h2 id=&#34;openstack-services-installed&#34;&gt;OpenStack services installed&lt;/h2&gt;

&lt;p&gt;The following OpenStack services are installed as part these scripts:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Keystone (Identity)&lt;/li&gt;
&lt;li&gt;Glance (Image)&lt;/li&gt;
&lt;li&gt;Nova (Compute)&lt;/li&gt;
&lt;li&gt;Neutron (Networking)&lt;/li&gt;
&lt;li&gt;Horizon (Dashboard)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;what-s-new-in-ocata-in-terms-of-installation&#34;&gt;What&amp;rsquo;s new in Ocata in terms of Installation?&lt;/h2&gt;

&lt;p&gt;Here are some changes in the installation steps of OpenStack Ocata release with respect to the above services.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Nova now supports Cells. Cells allow grouping of Nova services in a hierarchical manner. This in turn can provide more scalability.&lt;/li&gt;
&lt;li&gt;Nova has also started using Placement API - this is a new way of doing instance scheduling or placement of workloads.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;ocata-install-scripts-on-github&#34;&gt;Ocata install scripts on GitHub&lt;/h2&gt;

&lt;p&gt;All the scripts are available as an open source package (Apache License). You can get the source code &lt;a href=&#34;https://goo.gl/A8JmlO&#34;&gt;from my GitHub repository&lt;/a&gt;. I welcome you to fork the repo and enhance/extend it.&lt;/p&gt;

&lt;h2 id=&#34;prerequisites&#34;&gt;Prerequisites&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;git&lt;/em&gt; binaries must be installed on your Ubuntu server. This is needed to checkout the scripts to your Ubuntu server.&lt;/p&gt;

&lt;p&gt;If you are using VirtualBox, &lt;a href=&#34;http://goo.gl/VTJVmv&#34;&gt;refer to this blog for Network settings&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;installation-steps&#34;&gt;Installation steps&lt;/h2&gt;

&lt;p&gt;The GitHub repository includes details about the installation steps.&lt;/p&gt;


&lt;link rel=&#34;stylesheet&#34; href=&#34;http://reachsrirams.github.io/blogs/blogs/css/hugo-easy-gallery.css&#34; /&gt;
&lt;div class=&#34;box&#34; &gt;
  &lt;figure class=&#34;center&#34; itemprop=&#34;associatedMedia&#34; itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
    &lt;div class=&#34;img&#34;&gt;
      &lt;img itemprop=&#34;thumbnail&#34; src=&#34;http://reachsrirams.github.io/blogs/blogs/images/2017/Screenshot-2017-06-03-08.01.41.png&#34; /&gt;
    &lt;/div&gt;
    &lt;a href=&#34;http://reachsrirams.github.io/blogs/blogs/images/2017/Screenshot-2017-06-03-08.01.41.png&#34; itemprop=&#34;contentUrl&#34;&gt;&lt;/a&gt;
  &lt;/figure&gt;
&lt;/div&gt;

</description>
      
    </item>
    
    <item>
      <title>Newton release install scripts for OpenStack</title>
      <link>http://reachsrirams.github.io/blogs/2017/05/02/openstack-newton-install/</link>
      <pubDate>Tue, 02 May 2017 05:07:42 +0000</pubDate>
      
      <guid>http://reachsrirams.github.io/blogs/2017/05/02/openstack-newton-install/</guid>
      
        <description>

&lt;p&gt;Newton is one the recent releases of OpenStack.  I would like to share scripts that can be used to install the &lt;a href=&#34;https://docs.openstack.org/newton/install-guide-ubuntu/&#34;&gt;Newton release of OpenStack on Ubuntu 16.04 as per the installation guide&lt;/a&gt;. As part of my blogging, book writing projects, I have the need to install OpenStack many times. And I have been automating the installation by writing simple shell scripts. The result is a collection of scripts that should help you get going with OpenStack&amp;rsquo;s latest release.&lt;/p&gt;

&lt;h2 id=&#34;openstack-services-installed&#34;&gt;OpenStack services installed&lt;/h2&gt;

&lt;p&gt;The following OpenStack services are installed as part these scripts:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Keystone (Identity)&lt;/li&gt;
&lt;li&gt;Glance (Image)&lt;/li&gt;
&lt;li&gt;Nova (Compute)&lt;/li&gt;
&lt;li&gt;Neutron (Networking)&lt;/li&gt;
&lt;li&gt;Horizon (Dashboard)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;what-s-new-in-newton-in-terms-of-installation&#34;&gt;What&amp;rsquo;s new in Newton in terms of Installation?&lt;/h2&gt;

&lt;p&gt;Here are some changes in the installation steps of OpenStack Newton release.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Keystone bootstrap process is different. The Admin projects/user is created using the &lt;em&gt;keystone-manage bootstrap&lt;/em&gt; command.&lt;/li&gt;
&lt;li&gt;The keystone endpoint creation steps are not required&lt;/li&gt;
&lt;li&gt;For Nova and Neutron, the OSLO configuration steps are not required&lt;/li&gt;
&lt;li&gt;The rabbitmq configuration steps are different in Newton release&lt;/li&gt;
&lt;li&gt;For Neutron Linux Bridge agent, the bridge name must be &lt;em&gt;provider&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Important&lt;/strong&gt; - Newton release does not ship with any Flavors for instances. This means that users need to create at least one flavor before they can spawn their first VM instance.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;newton-install-scripts-on-github&#34;&gt;Newton install scripts on GitHub&lt;/h2&gt;

&lt;p&gt;All the scripts are available as an open source package (Apache License). You can get the source code &lt;a href=&#34;https://goo.gl/Jac2bv&#34;&gt;from my GitHub repository&lt;/a&gt;. I welcome you to fork the repo and enhance/extend it.&lt;/p&gt;

&lt;h2 id=&#34;prerequisites&#34;&gt;Prerequisites&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;git&lt;/em&gt; binaries must be installed on your Ubuntu server. This is needed to checkout the scripts to your Ubuntu server.&lt;/p&gt;

&lt;p&gt;If you are using VirtualBox, &lt;a href=&#34;http://goo.gl/VTJVmv&#34;&gt;refer to this blog for Network settings.&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;installation-steps&#34;&gt;Installation steps&lt;/h2&gt;

&lt;p&gt;The GitHub repository includes details about the installation steps.&lt;/p&gt;


&lt;link rel=&#34;stylesheet&#34; href=&#34;http://reachsrirams.github.io/blogs/blogs/css/hugo-easy-gallery.css&#34; /&gt;
&lt;div class=&#34;box&#34; &gt;
  &lt;figure class=&#34;center&#34; itemprop=&#34;associatedMedia&#34; itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
    &lt;div class=&#34;img&#34;&gt;
      &lt;img itemprop=&#34;thumbnail&#34; src=&#34;http://reachsrirams.github.io/blogs/blogs/images/2017/Screenshot-2017-05-02-10.24.02.png&#34; /&gt;
    &lt;/div&gt;
    &lt;a href=&#34;http://reachsrirams.github.io/blogs/blogs/images/2017/Screenshot-2017-05-02-10.24.02.png&#34; itemprop=&#34;contentUrl&#34;&gt;&lt;/a&gt;
  &lt;/figure&gt;
&lt;/div&gt;


&lt;h2 id=&#34;next-steps&#34;&gt;Next steps&lt;/h2&gt;

&lt;p&gt;The most recent release of OpenStack is the Ocata release and that is the target for the next version of my OpenStack install scripts.&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>Goals for the first half of 2017</title>
      <link>http://reachsrirams.github.io/blogs/2017/02/02/goals-first-half-2017/</link>
      <pubDate>Thu, 02 Feb 2017 04:10:53 +0000</pubDate>
      
      <guid>http://reachsrirams.github.io/blogs/2017/02/02/goals-first-half-2017/</guid>
      
        <description>&lt;p&gt;First of all a very happy new year to all the readers. The fact that this blog comes more than a month into 2017 should give you hints on what sort of goals I have planned for 2017 first half. I will start with an assessment of the second half of 2016.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h2 id=&#34;status-of-2016-second-half-goals&#34;&gt;Status of 2016 second half goals&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Build and blog about a small OpenStack GUI related idea – this could be 1-2 blogs

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Score: &lt;sup&gt;8&lt;/sup&gt;&amp;frasl;&lt;sub&gt;10&lt;/sub&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Status&lt;/strong&gt;: I wrote two blogs related to OpenStack Horizon and shared my code on Github. I rated myself as &lt;sup&gt;8&lt;/sup&gt;&amp;frasl;&lt;sub&gt;10&lt;/sub&gt; because I could have done better. Both in terms of timing of the blogs and the depth of content I really feel there was scope for improvement.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Enhance my OpenStack install scripts for &lt;em&gt;Newton&lt;/em&gt; release. This release will happen in October

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Score: 0/10&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Status&lt;/strong&gt;: This work hardly moved an inch.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;In the second half of 2016, I released my second book titled “Software Defined Networking with OpenStack”. While I am not happy that I missed the Newton install scripts goal, overall I am pleased with the way the year turned out.&lt;/p&gt;

&lt;h2 id=&#34;goals-for-the-first-half-of-2017&#34;&gt;Goals for the first half of 2017&lt;/h2&gt;

&lt;p&gt;I am going to carry forward a simple goal for several reasons. I want to manage this before June-end that is 5 months away. I need time to explore ideas for yet another book. And finally I am working on some personal projects that will improve my writing skills in general. So here is the only goal for 2017 first half:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Enhance my OpenStack install scripts for &lt;em&gt;Newton&lt;/em&gt; and &lt;em&gt;Ocata&lt;/em&gt; release. Newton release is already out and Ocata should release around May-mid.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;This is still an aggressive goal - espeacially for Ocata.&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>OpenStack Horizon: extending the dashboard – Part 2</title>
      <link>http://reachsrirams.github.io/blogs/2017/01/22/openstack-horizon-extending-dashboard-part-2/</link>
      <pubDate>Sun, 22 Jan 2017 17:42:35 +0000</pubDate>
      
      <guid>http://reachsrirams.github.io/blogs/2017/01/22/openstack-horizon-extending-dashboard-part-2/</guid>
      
        <description>

&lt;p&gt;In this second installment of my blog on OpenStack Horizon, I will take you through different source code files that make a custom OpenStack dashboard. As a recap from the &lt;a href=&#34;http://www.innervoice.in/blogs/2016/12/27/openstack-horizon-customizing-the-dashboard/&#34; target=&#34;_blank&#34;&gt;first installment&lt;/a&gt;, I will show you how to create a custom dashboard to view all the Neutron &amp;#8220;ports&amp;#8221; in your OpenStack based cloud.&lt;/p&gt;

&lt;h2 id=&#34;enabling-openstack-horizon-dashboard&#34;&gt;Enabling OpenStack Horizon Dashboard&lt;/h2&gt;

&lt;p&gt;Django framework loads and enables dashboards based on entries present in the &lt;em&gt;enabled&lt;/em&gt; directory of OpenStack Dashboard. This is typically located under _/usr/share/openstack-dashboard/openstack&lt;em&gt;dashboard/enabed/&lt;/em&gt; folder of your OpenStack Horizon installation.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://127.0.0.1/wordpress/wp-content/uploads/2017/01/Screenshot-2017-01-22-09.53.24.png&#34;&gt;&lt;img class=&#34;aligncenter wp-image-1468 size-large&#34; src=&#34;http://127.0.0.1/wordpress/wp-content/uploads/2017/01/Screenshot-2017-01-22-09.53.24-1024x468.png&#34; alt=&#34;Python file to enable a OpenStack Horizon dashboard&#34; width=&#34;620&#34; height=&#34;283&#34; srcset=&#34;http://127.0.0.1/wordpress/wp-content/uploads/2017/01/Screenshot-2017-01-22-09.53.24-1024x468.png 1024w, http://127.0.0.1/wordpress/wp-content/uploads/2017/01/Screenshot-2017-01-22-09.53.24-300x137.png 300w, http://127.0.0.1/wordpress/wp-content/uploads/2017/01/Screenshot-2017-01-22-09.53.24-768x351.png 768w, http://127.0.0.1/wordpress/wp-content/uploads/2017/01/Screenshot-2017-01-22-09.53.24.png 1384w&#34; sizes=&#34;(max-width: 620px) 100vw, 620px&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As shown above this Python file defines a Dashboard called &lt;em&gt;cloudbuilder&lt;/em&gt; and the DISABLED flag is set to False. Django will look for a Python package called &lt;em&gt;cloudbuilder&lt;/em&gt; to construct and display a custom dashboard. In this package, Django will look for a file called _dashboard.py_ to load the actual implementation of the dashboard.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://127.0.0.1/wordpress/wp-content/uploads/2017/01/Screenshot-2017-01-22-09.54.32.png&#34;&gt;&lt;img class=&#34;aligncenter size-large wp-image-1471&#34; src=&#34;http://127.0.0.1/wordpress/wp-content/uploads/2017/01/Screenshot-2017-01-22-09.54.32-1024x681.png&#34; alt=&#34;Python file containing dashboard implementation&#34; width=&#34;620&#34; height=&#34;412&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As shown above the &lt;em&gt;dashboard.py&lt;/em&gt; defines a class &lt;em&gt;CloudBuilderDashboard&lt;/em&gt; that extends the default &lt;em&gt;horizon.Dashboard&lt;/em&gt; class. The slug used to give a unique URL for the dashboard. We further define the list of Panel Groups for this Dashboard. The definition of Panel group called &lt;em&gt;NeutronPanels&lt;/em&gt; shows that it will contain one Panel called &lt;em&gt;neutronportlist&lt;/em&gt;.&lt;/p&gt;

&lt;h2 id=&#34;openstack-dashboard-panel&#34;&gt;OpenStack Dashboard Panel&lt;/h2&gt;

&lt;p&gt;We have shown that Panel Group contains one or more panels and in the code snippet above &lt;em&gt;neutronportlist&lt;/em&gt; is one of the panel in our example. Once again the Horizon Django framework looks for a Python package named _neutronportlist_ in order load the panel. This is the package that will contain the Django MVC code that we discussed in the first installment of this blog.&lt;/p&gt;

&lt;p&gt;Let us first look at the &lt;em&gt;panel.py&lt;/em&gt; file. This file &lt;em&gt;registers&lt;/em&gt; the panel with Dashboard so that it can be shown as part of the overall Horizon dashboard. Once again the &lt;em&gt;slug&lt;/em&gt; represents the URL that will be used to display the panel on the web broweser.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://127.0.0.1/wordpress/wp-content/uploads/2017/01/Screenshot-2017-01-22-09.54.52.png&#34;&gt;&lt;img class=&#34;aligncenter wp-image-1476 size-large&#34; src=&#34;http://127.0.0.1/wordpress/wp-content/uploads/2017/01/Screenshot-2017-01-22-09.54.52-1024x490.png&#34; alt=&#34;Registering a panel with a Dashboard&#34; width=&#34;620&#34; height=&#34;297&#34; srcset=&#34;http://127.0.0.1/wordpress/wp-content/uploads/2017/01/Screenshot-2017-01-22-09.54.52-1024x490.png 1024w, http://127.0.0.1/wordpress/wp-content/uploads/2017/01/Screenshot-2017-01-22-09.54.52-300x144.png 300w, http://127.0.0.1/wordpress/wp-content/uploads/2017/01/Screenshot-2017-01-22-09.54.52-768x367.png 768w, http://127.0.0.1/wordpress/wp-content/uploads/2017/01/Screenshot-2017-01-22-09.54.52.png 1580w&#34; sizes=&#34;(max-width: 620px) 100vw, 620px&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now we will turn our attention to the most important file within the entire custom dashboard code. This is the &lt;em&gt;views.py&lt;/em&gt; file for a given panel. As discussed in the previous installment, the &lt;em&gt;views.py&lt;/em&gt; represents the controller of the panel. Therefore it plays a central role in what is finally shown to the end user.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://127.0.0.1/wordpress/wp-content/uploads/2017/01/Screenshot-2017-01-22-09.55.08.png&#34;&gt;&lt;img class=&#34;aligncenter wp-image-1478 size-large&#34; src=&#34;http://127.0.0.1/wordpress/wp-content/uploads/2017/01/Screenshot-2017-01-22-09.55.08-1024x606.png&#34; alt=&#34;Neutron Port List Panel&#34; width=&#34;620&#34; height=&#34;367&#34; srcset=&#34;http://127.0.0.1/wordpress/wp-content/uploads/2017/01/Screenshot-2017-01-22-09.55.08-1024x606.png 1024w, http://127.0.0.1/wordpress/wp-content/uploads/2017/01/Screenshot-2017-01-22-09.55.08-300x178.png 300w, http://127.0.0.1/wordpress/wp-content/uploads/2017/01/Screenshot-2017-01-22-09.55.08-768x455.png 768w, http://127.0.0.1/wordpress/wp-content/uploads/2017/01/Screenshot-2017-01-22-09.55.08.png 1598w&#34; sizes=&#34;(max-width: 620px) 100vw, 620px&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;p&gt;The above code snippet shows the &lt;em&gt;views.py&lt;/em&gt; of the Neutron Port List Panel. This file represents the Controller in the MVC pattern and as you can see from the code the Model is represented by _table&lt;em&gt;class&lt;/em&gt; variable and the View is represented by the _template_name _variable. In addition, the Controller decides how to fetch the _data_ that will be displayed in this page. Since we are showing a &lt;em&gt;list of all Neutron ports&lt;/em&gt; the _get_data _method is using the &lt;strong&gt;Neutron API of Horizon&lt;/strong&gt; to fetch the list of ports.&lt;/p&gt;

&lt;p&gt;The last file related to this custom dashboard is the &lt;em&gt;tables.py&lt;/em&gt;. This file represents the model for the Django application. We have shown that the controller (&lt;em&gt;views.py&lt;/em&gt;) retrieves the data but the UI will use the tables.py as the model to process and data.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://127.0.0.1/wordpress/wp-content/uploads/2017/01/Screenshot-2017-01-22-09.55.40.png&#34;&gt;&lt;img class=&#34;aligncenter size-large wp-image-1479&#34; src=&#34;http://127.0.0.1/wordpress/wp-content/uploads/2017/01/Screenshot-2017-01-22-09.55.40-1024x966.png&#34; alt=&#34;Code representing the Model&#34; width=&#34;620&#34; height=&#34;585&#34; srcset=&#34;http://127.0.0.1/wordpress/wp-content/uploads/2017/01/Screenshot-2017-01-22-09.55.40-1024x966.png 1024w, http://127.0.0.1/wordpress/wp-content/uploads/2017/01/Screenshot-2017-01-22-09.55.40-300x283.png 300w, http://127.0.0.1/wordpress/wp-content/uploads/2017/01/Screenshot-2017-01-22-09.55.40-768x725.png 768w&#34; sizes=&#34;(max-width: 620px) 100vw, 620px&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;p&gt;A quick look at the &lt;em&gt;tables.py&lt;/em&gt; shows that it defines the columns and the corresponding values from _port _that will be displayed on the UI. You can use this file to customize what gets displayed on the Web page. For example: if port has a non-empty Device ID, then it means that it is attached to some network resource. This is displayed as &amp;#8220;Attached&amp;#8221; as per the snippet shown above.&lt;/p&gt;

&lt;p&gt;The final piece of the MVC pattern used in a OpenStack Horizon dashboard is the UI. This is represented by the &lt;em&gt;index.html&lt;/em&gt; in the _templates_ package of the panel. In our case we can see below that the Django framework will simply render the _table_ while processing the directives inside &lt;em&gt;index.html&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://127.0.0.1/wordpress/wp-content/uploads/2017/01/Screenshot-2017-01-22-22.59.18.png&#34;&gt;&lt;img class=&#34;aligncenter size-large wp-image-1480&#34; src=&#34;http://127.0.0.1/wordpress/wp-content/uploads/2017/01/Screenshot-2017-01-22-22.59.18-1024x534.png&#34; alt=&#34;The view component of the dashboard panel&#34; width=&#34;620&#34; height=&#34;323&#34; srcset=&#34;http://127.0.0.1/wordpress/wp-content/uploads/2017/01/Screenshot-2017-01-22-22.59.18-1024x534.png 1024w, http://127.0.0.1/wordpress/wp-content/uploads/2017/01/Screenshot-2017-01-22-22.59.18-300x156.png 300w, http://127.0.0.1/wordpress/wp-content/uploads/2017/01/Screenshot-2017-01-22-22.59.18-768x400.png 768w, http://127.0.0.1/wordpress/wp-content/uploads/2017/01/Screenshot-2017-01-22-22.59.18.png 1596w&#34; sizes=&#34;(max-width: 620px) 100vw, 620px&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;h2 id=&#34;putting-it-all-together&#34;&gt;Putting it all together&lt;/h2&gt;

&lt;p&gt;We have seen all the important files that make up a custom OpenStack dashboard. &lt;a href=&#34;https://github.com/reachsrirams/openstack-custom-dashboard&#34; target=&#34;_blank&#34;&gt;The source code for this blog is available on GitHub&lt;/a&gt;. It also includes a script to install these files in appropriate locations of your OpenStack installation. Please check &lt;em&gt;install.sh&lt;/em&gt; to ensure that the locations match your installation. Once the files are installed, you need to restart the Apache service using &lt;em&gt;sudo service apache2 restart&lt;/em&gt;. You can then login into your Horizon UI and check if the new custom dashboard is seen or not.&lt;/p&gt;

&lt;p&gt;Here is the screenshot of how the dashboard looks on my OpenStack setup.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://127.0.0.1/wordpress/wp-content/uploads/2017/01/Screenshot-2017-01-22-23.09.59.png&#34;&gt;&lt;img class=&#34;aligncenter size-large wp-image-1481&#34; src=&#34;http://127.0.0.1/wordpress/wp-content/uploads/2017/01/Screenshot-2017-01-22-23.09.59-1024x283.png&#34; alt=&#34;How the dashboard looks&#34; width=&#34;620&#34; height=&#34;171&#34; srcset=&#34;http://127.0.0.1/wordpress/wp-content/uploads/2017/01/Screenshot-2017-01-22-23.09.59-1024x283.png 1024w, http://127.0.0.1/wordpress/wp-content/uploads/2017/01/Screenshot-2017-01-22-23.09.59-300x83.png 300w, http://127.0.0.1/wordpress/wp-content/uploads/2017/01/Screenshot-2017-01-22-23.09.59-768x212.png 768w&#34; sizes=&#34;(max-width: 620px) 100vw, 620px&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This completes my introduction to the source code involved in creating custom dashboards and panels in OpenStack Horizon.&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>OpenStack Horizon: extending the dashboard – Part 1</title>
      <link>http://reachsrirams.github.io/blogs/2016/12/27/openstack-horizon-customizing-the-dashboard/</link>
      <pubDate>Tue, 27 Dec 2016 10:31:44 +0000</pubDate>
      
      <guid>http://reachsrirams.github.io/blogs/2016/12/27/openstack-horizon-customizing-the-dashboard/</guid>
      
        <description>

&lt;p&gt;OpenStack Horizon is the project that provides the web based dashboard for OpenStack based clouds. In this 2-part blog I will show you how you can extend the dashboard. Customizing and extending is one of the most powerful capabilities in OpenStack and in private cloud environments it is common to add additional enhancements to address an organization&amp;#8217;s needs.&lt;/p&gt;

&lt;h2 id=&#34;openstack-horizon-background&#34;&gt;OpenStack Horizon Background&lt;/h2&gt;

&lt;p&gt;Horizon is a Django based web application and is hosted using an Apache web server. User operations performed on the web dashboards are processed by Django scripts running on the backend. In the recent releases Horizon also support AngularJS based web interface. In this blog, however, I will cover only the Django based approach.&lt;/p&gt;

&lt;h3 id=&#34;architecture&#34;&gt;Architecture&lt;/h3&gt;

&lt;p&gt;As a Django application the OpenStack Horizon dashboard follows and MVC (Model-View-Controller) based architecture. The dashboard provides a web based interface for almost all the services within an OpenStack cloud. This requires the Horizon code to interact with other OpenStack services such as Nova, Neutron, Keystone to name a few. This interaction is implemented using a library of OpenStack Horizon APIs.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://127.0.0.1/wordpress/wp-content/uploads/2016/12/Horizon-UI-Components.png&#34;&gt;&lt;img class=&#34;aligncenter wp-image-1459 size-tiga-700px&#34; src=&#34;http://127.0.0.1/wordpress/wp-content/uploads/2016/12/Horizon-UI-Components-700x300.png&#34; alt=&#34;OpenStack Horizon MVC Architecture&#34; width=&#34;620&#34; height=&#34;266&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The above picture shows examples of directories containing code that make up the architecture of a typical OpenStack Horizon Dashboard.&lt;/p&gt;

&lt;h2 id=&#34;openstack-horizon-view-components&#34;&gt;OpenStack Horizon View Components&lt;/h2&gt;

&lt;p&gt;Visually the OpenStack Horizon UI is organized as a collection of &lt;em&gt;dashboards&lt;/em&gt;. A dashboard is further organized as a collection of &lt;em&gt;panel groups&lt;/em&gt;. And each panel group can support one more &lt;em&gt;panels&lt;/em&gt;. The picture below highlight these components on a typical OpenStack Horizon UI.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://127.0.0.1/wordpress/wp-content/uploads/2016/12/Horizon-View-Components.png&#34;&gt;&lt;img class=&#34;aligncenter wp-image-1460 size-tiga-460px&#34; src=&#34;http://127.0.0.1/wordpress/wp-content/uploads/2016/12/Horizon-View-Components-460x300.png&#34; alt=&#34;OpenStack Horizon UI Components&#34; width=&#34;460&#34; height=&#34;300&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The View aspect of the Django MVC architecture maps to a panel on the navigation bar. So for a given panel on the Horizon UI, we will have to implement the MVC components.&lt;/p&gt;

&lt;h2 id=&#34;enhancing-horizon&#34;&gt;Enhancing Horizon&lt;/h2&gt;

&lt;p&gt;As part of this blog, I will show you how to add a completely new dashboard and support a panel (view) that lists all the Neutron ports in an OpenStack cloud. Neutron ports represent the ingress and egress points for network traffic. So it will be useful to view all ports in a single web page.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/reachsrirams/openstack-custom-dashboard&#34; target=&#34;_blank&#34;&gt;The source code need for this blog is located on Github.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the next part, I will walk you through the important files for the custom OpenStack dashboard.&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>WILT – mysql, root and sudo</title>
      <link>http://reachsrirams.github.io/blogs/2016/11/13/wilt-mysql-root-and-sudo/</link>
      <pubDate>Sun, 13 Nov 2016 16:44:06 +0000</pubDate>
      
      <guid>http://reachsrirams.github.io/blogs/2016/11/13/wilt-mysql-root-and-sudo/</guid>
      
        <description>

&lt;p&gt;I came across an interesting behavior that helped me learn something about MySQL (MariaDB to be precise) authentication. In this WILT blog I will talk about the &amp;#8220;unix socket&amp;#8221; authentication plugin in MySQL/MariaDB. The steps shown in this blog have been tried on Ubuntu 16.04 and MariaDB Server 10.&lt;/p&gt;

&lt;h2 id=&#34;mariadb-install-and-root-user&#34;&gt;MariaDB Install and root user&lt;/h2&gt;

&lt;p&gt;In some earlier versions of MySQL as well as MariaDB server, the installation process required you to enter password for root user. This is the root user for the database. But in Ubuntu 16.04 and MariaDB server 10, the installation does not require you enter a root password. Post install you can either use the mysqladmin command or the mysql_secure_installation command to set root password.&lt;/p&gt;

&lt;h2 id=&#34;setting-password-using-mysql-secure-installation-command&#34;&gt;Setting password using mysql_secure_installation command&lt;/h2&gt;

&lt;p&gt;As a first step we will set a specific password for root user using mysql_secure_installation command. The screenshot below shows how this can be performed. Note: after setting password the command will ask few more questions whose answer are not directly relevant for this blog.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://127.0.0.1/wordpress/wp-content/uploads/2016/10/Screenshot-2016-10-09-22.32.08.png&#34;&gt;&lt;img class=&#34;aligncenter wp-image-1434 size-large&#34; src=&#34;http://127.0.0.1/wordpress/wp-content/uploads/2016/10/Screenshot-2016-10-09-22.32.08-1024x879.png&#34; alt=&#34;mysql_secure_installation command to change root password&#34; width=&#34;620&#34; height=&#34;532&#34; srcset=&#34;http://127.0.0.1/wordpress/wp-content/uploads/2016/10/Screenshot-2016-10-09-22.32.08-1024x879.png 1024w, http://127.0.0.1/wordpress/wp-content/uploads/2016/10/Screenshot-2016-10-09-22.32.08-300x258.png 300w, http://127.0.0.1/wordpress/wp-content/uploads/2016/10/Screenshot-2016-10-09-22.32.08-768x659.png 768w, http://127.0.0.1/wordpress/wp-content/uploads/2016/10/Screenshot-2016-10-09-22.32.08.png 1202w&#34; sizes=&#34;(max-width: 620px) 100vw, 620px&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;logging-into-the-mysql-client&#34;&gt;Logging into the mysql client&lt;/h2&gt;

&lt;p&gt;Now we will see what happens if I try to access the mysql client using the root DB user. As shown below, even though mysql client prompts for root password, the authentication actually fails.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://127.0.0.1/wordpress/wp-content/uploads/2016/10/Screenshot-2016-10-09-22.44.03.png&#34;&gt;&lt;img class=&#34;aligncenter wp-image-1435 size-full&#34; src=&#34;http://127.0.0.1/wordpress/wp-content/uploads/2016/10/Screenshot-2016-10-09-22.44.03.png&#34; alt=&#34;mysql command using root&#34; width=&#34;998&#34; height=&#34;156&#34; srcset=&#34;http://127.0.0.1/wordpress/wp-content/uploads/2016/10/Screenshot-2016-10-09-22.44.03.png 998w, http://127.0.0.1/wordpress/wp-content/uploads/2016/10/Screenshot-2016-10-09-22.44.03-300x47.png 300w, http://127.0.0.1/wordpress/wp-content/uploads/2016/10/Screenshot-2016-10-09-22.44.03-768x120.png 768w&#34; sizes=&#34;(max-width: 767px) 89vw, (max-width: 1000px) 54vw, (max-width: 1071px) 543px, 580px&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;logging-in-using-sudo&#34;&gt;Logging in using sudo&lt;/h2&gt;

&lt;p&gt;Next I will try to access the mysql client with sudo.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://127.0.0.1/wordpress/wp-content/uploads/2016/11/Screenshot-2016-11-13-21.44.02.png&#34;&gt;&lt;img class=&#34;aligncenter wp-image-1444 size-large&#34; src=&#34;http://127.0.0.1/wordpress/wp-content/uploads/2016/11/Screenshot-2016-11-13-21.44.02-1024x317.png&#34; alt=&#34;mysql command using sudo and password&#34; width=&#34;620&#34; height=&#34;192&#34; srcset=&#34;http://127.0.0.1/wordpress/wp-content/uploads/2016/11/Screenshot-2016-11-13-21.44.02-1024x317.png 1024w, http://127.0.0.1/wordpress/wp-content/uploads/2016/11/Screenshot-2016-11-13-21.44.02-300x93.png 300w, http://127.0.0.1/wordpress/wp-content/uploads/2016/11/Screenshot-2016-11-13-21.44.02-768x238.png 768w, http://127.0.0.1/wordpress/wp-content/uploads/2016/11/Screenshot-2016-11-13-21.44.02.png 1286w&#34; sizes=&#34;(max-width: 620px) 100vw, 620px&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As shown above, now when you enter the correct password for root DB user, you will be able to access the database. And this is where things start to get interesting. Even if you enter a wrong password, you will notice that you can access the MySQL client as root user.&lt;/p&gt;

&lt;p&gt;Next try accessing the MySQL without the -p option and without even the -u option, &lt;strong&gt;but with sudo_._ &lt;/strong&gt;As shown below, in both cases you will be able to login into the MySQL client.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://127.0.0.1/wordpress/wp-content/uploads/2016/11/Screenshot-2016-11-13-21.44.25.png&#34;&gt;&lt;img class=&#34;aligncenter wp-image-1445 size-large&#34; src=&#34;http://127.0.0.1/wordpress/wp-content/uploads/2016/11/Screenshot-2016-11-13-21.44.25-1024x294.png&#34; alt=&#34;mysql without -p option&#34; width=&#34;620&#34; height=&#34;178&#34; srcset=&#34;http://127.0.0.1/wordpress/wp-content/uploads/2016/11/Screenshot-2016-11-13-21.44.25-1024x294.png 1024w, http://127.0.0.1/wordpress/wp-content/uploads/2016/11/Screenshot-2016-11-13-21.44.25-300x86.png 300w, http://127.0.0.1/wordpress/wp-content/uploads/2016/11/Screenshot-2016-11-13-21.44.25-768x221.png 768w, http://127.0.0.1/wordpress/wp-content/uploads/2016/11/Screenshot-2016-11-13-21.44.25.png 1274w&#34; sizes=&#34;(max-width: 620px) 100vw, 620px&#34; /&gt;&lt;/a&gt;&lt;a href=&#34;http://127.0.0.1/wordpress/wp-content/uploads/2016/11/Screenshot-2016-11-13-21.44.42.png&#34;&gt;&lt;img class=&#34;aligncenter wp-image-1446 size-large&#34; src=&#34;http://127.0.0.1/wordpress/wp-content/uploads/2016/11/Screenshot-2016-11-13-21.44.42-1024x278.png&#34; alt=&#34;mysql without -u option&#34; width=&#34;620&#34; height=&#34;168&#34; srcset=&#34;http://127.0.0.1/wordpress/wp-content/uploads/2016/11/Screenshot-2016-11-13-21.44.42-1024x278.png 1024w, http://127.0.0.1/wordpress/wp-content/uploads/2016/11/Screenshot-2016-11-13-21.44.42-300x82.png 300w, http://127.0.0.1/wordpress/wp-content/uploads/2016/11/Screenshot-2016-11-13-21.44.42-768x209.png 768w, http://127.0.0.1/wordpress/wp-content/uploads/2016/11/Screenshot-2016-11-13-21.44.42.png 1266w&#34; sizes=&#34;(max-width: 620px) 100vw, 620px&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So it seems that with sudo mysql, we can get access to root DB user without any other authentication other than the one prompted by sudo.&lt;/p&gt;

&lt;h2 id=&#34;what-is-going-on&#34;&gt;What is going on?&lt;/h2&gt;

&lt;p&gt;To understand what is going on, let us look at the user table inside the mysql database. Once you have successfully logged into the MySQL client, you can execute the SQL query shown below.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://127.0.0.1/wordpress/wp-content/uploads/2016/11/Screenshot-2016-11-13-21.47.27.png&#34;&gt;&lt;img class=&#34;aligncenter wp-image-1447 size-large&#34; src=&#34;http://127.0.0.1/wordpress/wp-content/uploads/2016/11/Screenshot-2016-11-13-21.47.27-1024x196.png&#34; alt=&#34;SQL query showing plugin&#34; width=&#34;620&#34; height=&#34;119&#34; srcset=&#34;http://127.0.0.1/wordpress/wp-content/uploads/2016/11/Screenshot-2016-11-13-21.47.27-1024x196.png 1024w, http://127.0.0.1/wordpress/wp-content/uploads/2016/11/Screenshot-2016-11-13-21.47.27-300x57.png 300w, http://127.0.0.1/wordpress/wp-content/uploads/2016/11/Screenshot-2016-11-13-21.47.27-768x147.png 768w, http://127.0.0.1/wordpress/wp-content/uploads/2016/11/Screenshot-2016-11-13-21.47.27.png 1296w&#34; sizes=&#34;(max-width: 620px) 100vw, 620px&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The most important column here is the &lt;strong&gt;plugin&lt;/strong&gt; column. For root DB user, we can see that the plugin is &lt;strong&gt;unix_socket&lt;/strong&gt;. The plugin column indicates the pluggable authentication mechanism to authenticate the DB user. In case of root, the plugin of &lt;strong&gt;unix_socket &lt;/strong&gt;means that MySQL will authenticate based on the &lt;strong&gt;ID of the user creating the client side socket&lt;/strong&gt; for communicating with the MySQL server.&lt;/p&gt;

&lt;p&gt;When you use &lt;strong&gt;sudo&lt;/strong&gt;, the client program runs with &lt;strong&gt;root &lt;/strong&gt;privilege. Therefore the client socket is created with &lt;strong&gt;root &lt;/strong&gt;privilege as well. The MySQL authentication cross checks the user ID of the client socket against the &lt;strong&gt;same DB user ID&lt;/strong&gt; and if the DB user is authenticated using unix_socket, it will allow connection to the MySQL client.&lt;/p&gt;

&lt;h2 id=&#34;how-is-this-useful&#34;&gt;How is this useful?&lt;/h2&gt;

&lt;p&gt;This plugin mechanism is helpful when DB client programs are running on the same server as that of the DB server. If all users are allowed access using Unix sockets, only applications running locally can access the DB. This gives some basic protection against unauthorized remote access to the DB. Moreover local users can continue to use their Unix passwords instead of using yet another password to access their DB accounts.&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>Book Announcement and Launch discounts</title>
      <link>http://reachsrirams.github.io/blogs/2016/10/26/book-announcement-launch-discounts/</link>
      <pubDate>Wed, 26 Oct 2016 14:57:29 +0000</pubDate>
      
      <guid>http://reachsrirams.github.io/blogs/2016/10/26/book-announcement-launch-discounts/</guid>
      
        <description>

&lt;p&gt;My second book titled &amp;#8220;Software Defined Networking with OpenStack&amp;#8221; is almost ready to be available publicly. You can find the overview of the book below.&lt;/p&gt;

&lt;p&gt;With OpenStack Summit going on in Barcelona, my publishers, Packt, have graciously announced pre-launch discounts for the new book. You can get the following discounts:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;15% off on Print copies (code: SDNWOS15)&lt;/li&gt;
&lt;li&gt;50% off on eBooks (code: SDNWOS50)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Both discounts available at &lt;a href=&#34;https://goo.gl/IIX7F5&#34;&gt;my publisher website&lt;/a&gt;. Discounts valid until Oct 28, 2016 (till end of the OpenStack Summit).&lt;/p&gt;

&lt;h2 id=&#34;overview-of-the-book&#34;&gt;Overview of the book&lt;/h2&gt;

&lt;p&gt;Networking is one the pillars of OpenStack and OpenStack Networking are designed to support programmability and Software-Defined Networks. OpenStack Networking has been evolving from simple APIs and functionality in Quantum to more complex capabilities in Neutron.&lt;/p&gt;

&lt;p&gt;Armed with the basic knowledge, this book will help the readers to explore popular SDN technologies, namely, OpenDaylight (ODL), OpenContrail, Open Network Operating System (ONOS) and Open Virtual Network (OVN).&lt;/p&gt;

&lt;p&gt;The first couple of chapters will provide an overview of OpenStack Networking and SDN in general. Thereafter a set of chapters are devoted to OpenDaylight (ODL), OpenContrail and their integration with OpenStack Networking. The book then introduces you to Open Network Operating System (ONOS) which is fast becoming a carrier grade SDN platform. We will conclude the book with overview of upcoming SDN projects within OpenStack namely OVN and Dragonflow.&lt;/p&gt;

&lt;p&gt;By the end of the book, the readers will be familiar with SDN technologies and know how they can be leveraged in an OpenStack based cloud.&lt;/p&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>Goals for second half of 2016</title>
      <link>http://reachsrirams.github.io/blogs/2016/07/06/goals-for-second-half-of-2016/</link>
      <pubDate>Wed, 06 Jul 2016 07:19:37 +0000</pubDate>
      
      <guid>http://reachsrirams.github.io/blogs/2016/07/06/goals-for-second-half-of-2016/</guid>
      
        <description>&lt;p&gt;It is that time of the year again - time to share my blogging and learning goals for the second half of 2016. Let’s start with a review of the first half of 2016.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h2 id=&#34;status-of-2016-first-half-goals&#34;&gt;Status of 2016 first half goals&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Build and blog about a small OpenStack GUI related idea – this could be 1-2 blogs

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Score: 0/10&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Status&lt;/strong&gt;: Technically I have done some ground work but nowhere near what I wanted to be&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Release the installation scripts for Liberty release of OpenStack on GitHub

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Score: &lt;sup&gt;10&lt;/sup&gt;&amp;frasl;&lt;sub&gt;10&lt;/sub&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Status&lt;/strong&gt;: I exceeded this goal and completed &lt;a href=&#34;http://www.innervoice.in/blogs/2016/07/06/mitaka-on-ubuntu-install-scripts-for-openstack&#34;&gt;scripting even for Mitaka release of OpenStack&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Write a management related blog on LinkedIn

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Score: 0/10&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Status&lt;/strong&gt;:Another easy one. I have no plans to do this and will be abandoning this idea.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;This is clearly not what I had planned for. And no excuses for not being able to meet my goals. While I exceeded one of the goals and wrote another blog related to &lt;a href=&#34;http://www.innervoice.in/blogs/2016/07/06/mitaka-on-ubuntu-install-scripts-for-openstack&#34;&gt;viewing logs using browser&lt;/a&gt;, I must admit that I did not execute on my plans properly.&lt;/p&gt;

&lt;h2 id=&#34;goals-for-the-second-half-of-2016&#34;&gt;Goals for the second half of 2016&lt;/h2&gt;

&lt;p&gt;Finally here are my ideas for the second half of 2016.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Build and blog about a small OpenStack GUI related idea – this could be 1-2 blogs&lt;/li&gt;
&lt;li&gt;Enhance my OpenStack install scripts for &lt;em&gt;Newton&lt;/em&gt; release. This release will happen in October&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;My second book covers some very interesting and challenging (for me) topics. I foresee that it will continue to keep me busy (happily) so I will have to be more conservative with my goals now. I really hope to be successful with these two goals and other personal/professional plans I have for myself.&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>Mitaka on Ubuntu – install scripts for OpenStack</title>
      <link>http://reachsrirams.github.io/blogs/2016/07/06/mitaka-on-ubuntu-install-scripts-for-openstack/</link>
      <pubDate>Wed, 06 Jul 2016 06:45:45 +0000</pubDate>
      
      <guid>http://reachsrirams.github.io/blogs/2016/07/06/mitaka-on-ubuntu-install-scripts-for-openstack/</guid>
      
        <description>

&lt;p&gt;Mitaka is the most recent release of OpenStack and currently it is supports &lt;a href=&#34;http://docs.openstack.org/mitaka/install-guide-ubuntu/&#34;&gt;Ubuntu 14.04 LTS (trusty)&lt;/a&gt;. I would like to share scripts that can be used to install the Mitaka release of OpenStack on Ubuntu. As part of my blogging, book writing projects, I have had the need to install OpenStack many times. And I have been automating the installation by writing simple shell scripts. The result is a collection of scripts that should help you get going with OpenStack&amp;#8217;s latest release.&lt;/p&gt;

&lt;h2 id=&#34;mitaka-install-scripts-on-github&#34;&gt;Mitaka install scripts on GitHub&lt;/h2&gt;

&lt;p&gt;All the scripts are available as an open source package (Apache License). You can get the source code &lt;a href=&#34;https://goo.gl/wltgJg&#34;&gt;from my GitHub repository&lt;/a&gt;. I welcome you to fork the repo and enhance/extend it.&lt;/p&gt;

&lt;h2 id=&#34;prerequisites&#34;&gt;Prerequisites&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;git&lt;/em&gt; binaries must be installed on your Ubuntu server. This is needed to checkout the scripts to your Ubuntu server.&lt;/p&gt;

&lt;p&gt;If you are using VirtualBox, &lt;a href=&#34;http://goo.gl/VTJVmv&#34; target=&#34;_blank&#34;&gt;refer to this blog for Network settings&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;installation-steps&#34;&gt;Installation steps&lt;/h2&gt;

&lt;p&gt;The GitHub repository includes details about the installation steps.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://127.0.0.1/wordpress/wp-content/uploads/2016/07/Screenshot-2016-07-06-12.12.22.png&#34;&gt;&lt;img class=&#34;aligncenter size-medium wp-image-1419&#34; src=&#34;http://127.0.0.1/wordpress/wp-content/uploads/2016/07/Screenshot-2016-07-06-12.12.22-300x287.png&#34; alt=&#34;Mitaka installation steps&#34; width=&#34;300&#34; height=&#34;287&#34; srcset=&#34;http://127.0.0.1/wordpress/wp-content/uploads/2016/07/Screenshot-2016-07-06-12.12.22-300x287.png 300w, http://127.0.0.1/wordpress/wp-content/uploads/2016/07/Screenshot-2016-07-06-12.12.22-768x734.png 768w, http://127.0.0.1/wordpress/wp-content/uploads/2016/07/Screenshot-2016-07-06-12.12.22-1024x978.png 1024w&#34; sizes=&#34;(max-width: 300px) 100vw, 300px&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;openstack-services-installed&#34;&gt;OpenStack services installed&lt;/h2&gt;

&lt;p&gt;The following OpenStack services are installed as part these scripts:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Keystone (Identity)&lt;/li&gt;
&lt;li&gt;Glance (Image)&lt;/li&gt;
&lt;li&gt;Nova (Compute)&lt;/li&gt;
&lt;li&gt;Neutron (Networking)&lt;/li&gt;
&lt;li&gt;Horizon (Dashboard)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I will be enhancing these scripts for Cinder, Heat and Ceilometer services.&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>OpenStack Controller Logs – view using a browser</title>
      <link>http://reachsrirams.github.io/blogs/2016/06/27/openstack-controller-logs-view-using-browser/</link>
      <pubDate>Mon, 27 Jun 2016 18:22:07 +0000</pubDate>
      
      <guid>http://reachsrirams.github.io/blogs/2016/06/27/openstack-controller-logs-view-using-browser/</guid>
      
        <description>

&lt;p&gt;OpenStack is made up of various services. These services have their own logs stored under /var/log directory. While working on OpenStack related projects it is quite common to monitor the logs for any problems or errors. While the tail command is the most popular, there are many benefits of using web browser to view the logs. In this blog let us see how we can view OpenStack Controller Logs using a browser.&lt;/p&gt;

&lt;h2 id=&#34;using-a-browser-for-openstack-controller-logs&#34;&gt;Using a browser for OpenStack Controller Logs&lt;/h2&gt;

&lt;p&gt;We can easily use browser tabs to view multiple logs simultaneously. Searching a log file is lot more user friendly on a browser. The best part of this solution is that you do not need to install additional software. OpenStack controller requires Apache web server for several purposes. We will show how to leverage the same web server to stream the logs.&lt;/p&gt;

&lt;h2 id=&#34;configuring-apache&#34;&gt;Configuring Apache&lt;/h2&gt;

&lt;p&gt;OpenStack uses Apache web server for different projects. We will leverage the same web server to display logs of different services.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Step 1&lt;/strong&gt; &amp;#8211; The first step is to create a directory under /var/www/html. This directory will be used as part of the URL on the web browser. For example if you create a directory called openstacklogs, then point your web browser to &amp;#8211; http://&amp;lt;horizon-controller-ip/openstacklogs&lt;/li&gt;
&lt;/ul&gt;

&lt;pre class=&#34;lang:java decode:true &#34;&gt;sudo mkdir /var/www/html/openstacklogs&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Step 2&lt;/strong&gt; &amp;#8211; Give read and execute permissions to the log directories of OpenStack services. For example if you want to allow Nova and Neutron logs to be viewable using web browser, execute the steps below.&lt;/li&gt;
&lt;/ul&gt;

&lt;pre class=&#34;lang:java decode:true &#34;&gt;sudo chmod a+rx /var/log/nova
sudo chmod a+rx /var/log/neutron&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Step 3&lt;/strong&gt; &amp;#8211; Create symlinks for these log directories as shown below.&lt;/li&gt;
&lt;/ul&gt;

&lt;pre class=&#34;lang:java decode:true &#34;&gt;sudo ln -s /var/log/nova /var/www/html/openstacklogs/nova
sudo ln -s /var/log/neutron /var/www/html/openstacklogs/neutron&lt;/pre&gt;

&lt;p&gt;These steps ensure that Apache is able to show the OpenStack Controller Logs as browsable content. You can now point your browser to http://&lt;horizon-controller-ip&gt;/openstacklogs. Here is screenshot of the same from my setup.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://127.0.0.1/wordpress/wp-content/uploads/2016/06/Screenshot-2016-06-27-23.35.21.png&#34;&gt;&lt;img class=&#34;aligncenter wp-image-1407 size-medium&#34; src=&#34;http://127.0.0.1/wordpress/wp-content/uploads/2016/06/Screenshot-2016-06-27-23.35.21-300x189.png&#34; alt=&#34;OpenStack Controller Logs using Web Browser&#34; width=&#34;300&#34; height=&#34;189&#34; srcset=&#34;http://127.0.0.1/wordpress/wp-content/uploads/2016/06/Screenshot-2016-06-27-23.35.21-300x189.png 300w, http://127.0.0.1/wordpress/wp-content/uploads/2016/06/Screenshot-2016-06-27-23.35.21-768x484.png 768w, http://127.0.0.1/wordpress/wp-content/uploads/2016/06/Screenshot-2016-06-27-23.35.21.png 918w&#34; sizes=&#34;(max-width: 300px) 100vw, 300px&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>Goals for the first half of 2016</title>
      <link>http://reachsrirams.github.io/blogs/2016/02/01/goals-for-the-first-half-of-2016/</link>
      <pubDate>Mon, 01 Feb 2016 05:17:20 +0000</pubDate>
      
      <guid>http://reachsrirams.github.io/blogs/2016/02/01/goals-for-the-first-half-of-2016/</guid>
      
        <description>&lt;p&gt;I am late by a month in sharing my blogging and learning goals for the first half of 2016. Let&amp;rsquo;s start with a review of the second half of 2015.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h2 id=&#34;status-of-2015-second-half-goals&#34;&gt;Status of 2015 second half goals&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;YouTube video related to OpenStack – making a video is not easy but I believe I have nailed down the topic for the video.

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Score:&lt;/strong&gt; &lt;strong&gt;&lt;sup&gt;10&lt;/sup&gt;&amp;frasl;&lt;sub&gt;10&lt;/sub&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Status:&lt;/strong&gt; I published a YouTube video on &lt;a href=&#34;https://goo.gl/wkJnjv&#34;&gt;OpenStack Neutron Ports&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Build and blog about a small OpenStack GUI related idea – this could be 1-2 blogs

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Score:&lt;/strong&gt; &lt;strong&gt;0/10&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Status: &lt;/strong&gt;I have done some ground work but no blogs, so no score&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Release the installation scripts for Kilo on Github

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Score: &lt;sup&gt;3&lt;/sup&gt;&amp;frasl;&lt;sub&gt;10&lt;/sub&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Status: &lt;/strong&gt;I have the working code in my &lt;a href=&#34;https://goo.gl/vgUSpO&#34; target=&#34;_blank&#34;&gt;GitHub account&lt;/a&gt; &amp;#8211; check out the dev/kilo branch. It works well but requires some finishing touches.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Write a management related blog on LinkedIn – something new that I want to attempt

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Score: 0/10&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Status:&lt;/strong&gt; Again I have written up a skeleton blog but nothing official to show&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Write 1 blog in the WILT series

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Score: &lt;sup&gt;10&lt;/sup&gt;&amp;frasl;&lt;sub&gt;10&lt;/sub&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Status: &lt;/strong&gt;Published the &lt;a href=&#34;http://www.innervoice.in/blogs/2015/11/27/ip-vs-ifconfig-wilt&#34;&gt;ip vs ipconfig WILT blog&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;If you look at the goals alone, it is clearly a mixed bag. I should have stretched a bit more completed more of the goals I set for myself. But considering the fact that I co-authored a &lt;a href=&#34;https://goo.gl/nCw8pc&#34;&gt;book on OpenStack&lt;/a&gt; and spoke at the &lt;a href=&#34;https://goo.gl/JYGcFo&#34;&gt;OpenStack Summit in Tokyo&lt;/a&gt;, I am happy with the accomplishments.&lt;/p&gt;

&lt;h2 id=&#34;goals-for-the-first-half-of-2016&#34;&gt;Goals for the first half of 2016&lt;/h2&gt;

&lt;p&gt;I am working on an idea for my second book so the goals for the first half will be somewhat conservative. OpenStack will continue to be the dominant theme.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Build and blog about a small OpenStack GUI related idea – this could be 1-2 blogs&lt;/li&gt;
&lt;li&gt;Release the installation scripts for &lt;em&gt;Liberty&lt;/em&gt; release of OpenStack on GitHub&lt;/li&gt;
&lt;li&gt;Write a management related blog on LinkedIn&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Given that only 5 months are left, I believe the goals above are reasonable taking into account personal and professional workload. I have carried forward these goals for a while and I am determined to complete them this time, so that I can pursue some fresh ideas for the second half of 2016.&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>PyCharm and OpenStack programming</title>
      <link>http://reachsrirams.github.io/blogs/2016/01/02/pycharm-and-openstack-programming/</link>
      <pubDate>Sat, 02 Jan 2016 17:43:51 +0000</pubDate>
      
      <guid>http://reachsrirams.github.io/blogs/2016/01/02/pycharm-and-openstack-programming/</guid>
      
        <description>

&lt;p&gt;OpenStack is based on the Python programming language and DevStack is the most common development and test environment for OpenStack. If you are doing serious, professional programming around OpenStack, it is very useful to have a proper development environment. In this blog, I will show you how to use the &lt;strong&gt;PyCharm IDE&lt;/strong&gt; from Jetbrains for your OpenStack programming. I will use the &lt;strong&gt;Neutron ML2 driver code from my book &lt;a href=&#34;http://goo.gl/TeXSYQ&#34;&gt;OpenStack Networking Cookbook&lt;/a&gt; to guide you&lt;/strong&gt; in setting up the PyCharm IDE.&lt;/p&gt;

&lt;h2 id=&#34;pycharm-and-openstack-programming-8211-background&#34;&gt;PyCharm and OpenStack programming &amp;#8211; background&lt;/h2&gt;

&lt;p&gt;DevStack provides a great test environment since it mimics a real OpenStack setup very well. DevStack includes development tools, but it is not the ideal development environment. Keeping development and test environment separate is a good practice. So it is better to write code in a non-DevStack environment and then deploy the unit tested code in DevStack for thorough testing. Moreover the benefits of using a visually-rich IDE such as PyCharm far outweigh the one-time effort to set it up.&lt;/p&gt;

&lt;h2 id=&#34;pycharm-prerequisites-and-installation&#34;&gt;PyCharm prerequisites and installation&lt;/h2&gt;

&lt;p&gt;In order to install and use PyCharm, you need to install Java (JRE) and Python 2.7. The PyCharm IDE is written in Java and hence it requires the JRE. But since the PyCharm IDE is intended from Python programming, you need the Python interpreter. OpenStack uses Python 2.7 so ensure that the correct version is installed.&lt;/p&gt;

&lt;p&gt;The installation steps for Java (JRE), Python 2.7 and PyCharm IDE are fairly straight forward. Depending on your OS, you should be able to find the instructions easily for these.&lt;/p&gt;

&lt;h2 id=&#34;create-a-new-pycharm-project-and-check-out-sample-ml2-driver-code&#34;&gt;Create a new PyCharm project and check out sample ML2 Driver code&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Once the IDE is started, click on New -&amp;gt; Project to create a new PyCharm project as shown in the screenshot below.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;http://127.0.0.1/wordpress/wp-content/uploads/2016/01/PyCharm-Blog-1-New-Project.png&#34;&gt;&lt;img class=&#34;aligncenter wp-image-1363 size-large&#34; src=&#34;http://127.0.0.1/wordpress/wp-content/uploads/2016/01/PyCharm-Blog-1-New-Project-1024x612.png&#34; alt=&#34;PyCharm New Project&#34; width=&#34;620&#34; height=&#34;371&#34; srcset=&#34;http://127.0.0.1/wordpress/wp-content/uploads/2016/01/PyCharm-Blog-1-New-Project-1024x612.png 1024w, http://127.0.0.1/wordpress/wp-content/uploads/2016/01/PyCharm-Blog-1-New-Project-300x179.png 300w, http://127.0.0.1/wordpress/wp-content/uploads/2016/01/PyCharm-Blog-1-New-Project-768x459.png 768w, http://127.0.0.1/wordpress/wp-content/uploads/2016/01/PyCharm-Blog-1-New-Project.png 1536w&#34; sizes=&#34;(max-width: 620px) 100vw, 620px&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;In the next screen enter the project name (you may have to replace the word &amp;#8220;Untitled&amp;#8221;). For this blog, lets call the project &lt;strong&gt;neutron-plugin&lt;/strong&gt;. And then click on &amp;#8220;Create&amp;#8221; button at the bottom.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;http://127.0.0.1/wordpress/wp-content/uploads/2016/01/PyCharm-Blog-2-Project-Name.png&#34;&gt;&lt;img class=&#34;aligncenter wp-image-1364 size-large&#34; src=&#34;http://127.0.0.1/wordpress/wp-content/uploads/2016/01/PyCharm-Blog-2-Project-Name-1024x604.png&#34; alt=&#34;PyCharm Project Name&#34; width=&#34;620&#34; height=&#34;366&#34; srcset=&#34;http://127.0.0.1/wordpress/wp-content/uploads/2016/01/PyCharm-Blog-2-Project-Name-1024x604.png 1024w, http://127.0.0.1/wordpress/wp-content/uploads/2016/01/PyCharm-Blog-2-Project-Name-300x177.png 300w, http://127.0.0.1/wordpress/wp-content/uploads/2016/01/PyCharm-Blog-2-Project-Name-768x453.png 768w, http://127.0.0.1/wordpress/wp-content/uploads/2016/01/PyCharm-Blog-2-Project-Name.png 1540w&#34; sizes=&#34;(max-width: 620px) 100vw, 620px&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Once the project is created, PyCharm creates a directory for it under &amp;#8220;PyCharmProjects&amp;#8221; directory by default. This folder can be found in the home directory of the user.&lt;/li&gt;
&lt;li&gt;Open a Terminal window (on Ubuntu) and change directory to the &lt;strong&gt;neutron-plugin&lt;/strong&gt; project as shown below. And then use &lt;strong&gt;git clone&lt;/strong&gt; command to fetch the sample ML2 driver code. &lt;strong&gt;The sample code is needed to show you how to resolve code dependencies.&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;http://127.0.0.1/wordpress/wp-content/uploads/2016/01/PyCharm-Blog-3-ML2-Code-Clone.png&#34;&gt;&lt;img class=&#34;aligncenter wp-image-1365 size-large&#34; src=&#34;http://127.0.0.1/wordpress/wp-content/uploads/2016/01/PyCharm-Blog-3-ML2-Code-Clone-1024x655.png&#34; alt=&#34;PyCharm ML2 Code Clone&#34; width=&#34;620&#34; height=&#34;397&#34; srcset=&#34;http://127.0.0.1/wordpress/wp-content/uploads/2016/01/PyCharm-Blog-3-ML2-Code-Clone-1024x655.png 1024w, http://127.0.0.1/wordpress/wp-content/uploads/2016/01/PyCharm-Blog-3-ML2-Code-Clone-300x192.png 300w, http://127.0.0.1/wordpress/wp-content/uploads/2016/01/PyCharm-Blog-3-ML2-Code-Clone-768x491.png 768w, http://127.0.0.1/wordpress/wp-content/uploads/2016/01/PyCharm-Blog-3-ML2-Code-Clone.png 1504w&#34; sizes=&#34;(max-width: 620px) 100vw, 620px&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Once the code is checked out, PyCharm will automatically show the folder under the project. If you open any of the sample Python files (for example _ch10_mech_driver&lt;em&gt;subnet.py&lt;/em&gt;) you will see that the Python modules &lt;em&gt;imported&lt;/em&gt; in this file are shown as errors (&lt;em&gt;red underlines&lt;/em&gt;). This is because we have not resolved the dependencies yet. Refer to the screenshot below.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;http://127.0.0.1/wordpress/wp-content/uploads/2016/01/PyCharm-Blog-4-Code-Error.png&#34;&gt;&lt;img class=&#34;aligncenter wp-image-1386 size-large&#34; src=&#34;http://127.0.0.1/wordpress/wp-content/uploads/2016/01/PyCharm-Blog-4-Code-Error-1024x766.png&#34; alt=&#34;PyCharm-Blog-4-Code-Error&#34; width=&#34;620&#34; height=&#34;464&#34; srcset=&#34;http://127.0.0.1/wordpress/wp-content/uploads/2016/01/PyCharm-Blog-4-Code-Error-1024x766.png 1024w, http://127.0.0.1/wordpress/wp-content/uploads/2016/01/PyCharm-Blog-4-Code-Error-300x224.png 300w, http://127.0.0.1/wordpress/wp-content/uploads/2016/01/PyCharm-Blog-4-Code-Error-768x575.png 768w&#34; sizes=&#34;(max-width: 620px) 100vw, 620px&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;check-out-dependent-packages&#34;&gt;Check out dependent packages&lt;/h2&gt;

&lt;p&gt;As seen from the steps to create the project, the sample ML2 driver code is dependent on OpenStack Neutron and Oslo Logging code modules. Now we will see how to download these modules.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The first step is to check out OpenStack Neutron and Oslo Logging packages from Github using the &lt;strong&gt;git clone&lt;/strong&gt; command. Here is how it looks in Ubuntu&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;http://127.0.0.1/wordpress/wp-content/uploads/2016/01/PyCharm-Blog-5-Dependency-Clone.png&#34;&gt;&lt;img class=&#34;aligncenter wp-image-1367 size-large&#34; src=&#34;http://127.0.0.1/wordpress/wp-content/uploads/2016/01/PyCharm-Blog-5-Dependency-Clone-1024x576.png&#34; alt=&#34;PyCharm Dependency Clone&#34; width=&#34;620&#34; height=&#34;349&#34; srcset=&#34;http://127.0.0.1/wordpress/wp-content/uploads/2016/01/PyCharm-Blog-5-Dependency-Clone-1024x576.png 1024w, http://127.0.0.1/wordpress/wp-content/uploads/2016/01/PyCharm-Blog-5-Dependency-Clone-300x169.png 300w, http://127.0.0.1/wordpress/wp-content/uploads/2016/01/PyCharm-Blog-5-Dependency-Clone-768x432.png 768w&#34; sizes=&#34;(max-width: 620px) 100vw, 620px&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;In my case, the Neutron and Oslo modules were downloaded to the home directory. Here is a screenshot that shows the content of the download modules&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;http://127.0.0.1/wordpress/wp-content/uploads/2016/01/PyCharm-Blog-6-Dependency-Directory.png&#34;&gt;&lt;img class=&#34;aligncenter wp-image-1368 size-large&#34; src=&#34;http://127.0.0.1/wordpress/wp-content/uploads/2016/01/PyCharm-Blog-6-Dependency-Directory-1024x562.png&#34; alt=&#34;PyCharm Dependency Directory&#34; width=&#34;620&#34; height=&#34;340&#34; srcset=&#34;http://127.0.0.1/wordpress/wp-content/uploads/2016/01/PyCharm-Blog-6-Dependency-Directory-1024x562.png 1024w, http://127.0.0.1/wordpress/wp-content/uploads/2016/01/PyCharm-Blog-6-Dependency-Directory-300x165.png 300w, http://127.0.0.1/wordpress/wp-content/uploads/2016/01/PyCharm-Blog-6-Dependency-Directory-768x421.png 768w&#34; sizes=&#34;(max-width: 620px) 100vw, 620px&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;configuring-pycharm-to-resolve-dependencies&#34;&gt;Configuring PyCharm to resolve dependencies&lt;/h2&gt;

&lt;p&gt;Now that we have dowloaded the dependent modules, let me show the steps involved in configuring PyCharm to manage the dependencies. At the end of these steps you will see that &amp;#8220;import errors&amp;#8221; seen in our sample source code will be eliminated.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Click on File and then Settings menu item.&lt;/li&gt;
&lt;li&gt;In the resulting dialog box, select &amp;#8220;Project Interpreter&amp;#8221; under &amp;#8220;Project: neutron-plugin&amp;#8221; as shown below. Then on the right hand side click the &amp;#8220;gear&amp;#8221; button.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;http://127.0.0.1/wordpress/wp-content/uploads/2016/01/PyCharm-Blog-8-Project-Interpreter.png&#34;&gt;&lt;img class=&#34;aligncenter wp-image-1370 size-large&#34; src=&#34;http://127.0.0.1/wordpress/wp-content/uploads/2016/01/PyCharm-Blog-8-Project-Interpreter-1024x528.png&#34; alt=&#34;PyCharm Project Interpreter&#34; width=&#34;620&#34; height=&#34;320&#34; srcset=&#34;http://127.0.0.1/wordpress/wp-content/uploads/2016/01/PyCharm-Blog-8-Project-Interpreter-1024x528.png 1024w, http://127.0.0.1/wordpress/wp-content/uploads/2016/01/PyCharm-Blog-8-Project-Interpreter-300x155.png 300w, http://127.0.0.1/wordpress/wp-content/uploads/2016/01/PyCharm-Blog-8-Project-Interpreter-768x396.png 768w&#34; sizes=&#34;(max-width: 620px) 100vw, 620px&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Once you click on the &amp;#8220;gear&amp;#8221; button you will see several options &amp;#8211; click on &amp;#8220;More&amp;#8221;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;http://127.0.0.1/wordpress/wp-content/uploads/2016/01/PyCharm-Blog-9-Interpreter-More.png&#34;&gt;&lt;img class=&#34;aligncenter wp-image-1371 size-large&#34; src=&#34;http://127.0.0.1/wordpress/wp-content/uploads/2016/01/PyCharm-Blog-9-Interpreter-More-1024x306.png&#34; alt=&#34;PyCharm Interpreter&#34; width=&#34;620&#34; height=&#34;185&#34; srcset=&#34;http://127.0.0.1/wordpress/wp-content/uploads/2016/01/PyCharm-Blog-9-Interpreter-More-1024x306.png 1024w, http://127.0.0.1/wordpress/wp-content/uploads/2016/01/PyCharm-Blog-9-Interpreter-More-300x90.png 300w, http://127.0.0.1/wordpress/wp-content/uploads/2016/01/PyCharm-Blog-9-Interpreter-More-768x230.png 768w, http://127.0.0.1/wordpress/wp-content/uploads/2016/01/PyCharm-Blog-9-Interpreter-More.png 1398w&#34; sizes=&#34;(max-width: 620px) 100vw, 620px&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The resulting window shows all the project interpreters. Click on the &amp;#8220;Show paths for selected interpreter&amp;#8221; button as highlighted below. This will allow us to configure Python Paths for this interpreter (for this project).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;http://127.0.0.1/wordpress/wp-content/uploads/2016/01/PyCharm-Blog-10-Interpreter-Path.png&#34;&gt;&lt;img class=&#34;aligncenter wp-image-1372 size-large&#34; src=&#34;http://127.0.0.1/wordpress/wp-content/uploads/2016/01/PyCharm-Blog-10-Interpreter-Path-1024x484.png&#34; alt=&#34;PyCharm Interpreter Path&#34; width=&#34;620&#34; height=&#34;293&#34; srcset=&#34;http://127.0.0.1/wordpress/wp-content/uploads/2016/01/PyCharm-Blog-10-Interpreter-Path-1024x484.png 1024w, http://127.0.0.1/wordpress/wp-content/uploads/2016/01/PyCharm-Blog-10-Interpreter-Path-300x142.png 300w, http://127.0.0.1/wordpress/wp-content/uploads/2016/01/PyCharm-Blog-10-Interpreter-Path-768x363.png 768w, http://127.0.0.1/wordpress/wp-content/uploads/2016/01/PyCharm-Blog-10-Interpreter-Path.png 1336w&#34; sizes=&#34;(max-width: 620px) 100vw, 620px&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Click on the &amp;#8220;+&amp;#8221; sign and choose the folders/directories that contain the dependencies.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;http://127.0.0.1/wordpress/wp-content/uploads/2016/01/PyCharm-Blog-11-Add-Path.png&#34;&gt;&lt;img class=&#34;aligncenter wp-image-1373 size-large&#34; src=&#34;http://127.0.0.1/wordpress/wp-content/uploads/2016/01/PyCharm-Blog-11-Add-Path-1024x507.png&#34; alt=&#34;PyCharm Interpreter Add Path&#34; width=&#34;620&#34; height=&#34;307&#34; srcset=&#34;http://127.0.0.1/wordpress/wp-content/uploads/2016/01/PyCharm-Blog-11-Add-Path-1024x507.png 1024w, http://127.0.0.1/wordpress/wp-content/uploads/2016/01/PyCharm-Blog-11-Add-Path-300x149.png 300w, http://127.0.0.1/wordpress/wp-content/uploads/2016/01/PyCharm-Blog-11-Add-Path-768x380.png 768w, http://127.0.0.1/wordpress/wp-content/uploads/2016/01/PyCharm-Blog-11-Add-Path.png 1276w&#34; sizes=&#34;(max-width: 620px) 100vw, 620px&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;For this blog I will select the Neutron and Oslo Logging module directories as shown below.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;http://127.0.0.1/wordpress/wp-content/uploads/2016/01/PyCharm-Blog-13-Add-New-Paths.png&#34;&gt;&lt;img class=&#34;aligncenter wp-image-1375 size-large&#34; src=&#34;http://127.0.0.1/wordpress/wp-content/uploads/2016/01/PyCharm-Blog-13-Add-New-Paths-1024x578.png&#34; alt=&#34;PyCharm Add New Paths&#34; width=&#34;620&#34; height=&#34;350&#34; srcset=&#34;http://127.0.0.1/wordpress/wp-content/uploads/2016/01/PyCharm-Blog-13-Add-New-Paths-1024x578.png 1024w, http://127.0.0.1/wordpress/wp-content/uploads/2016/01/PyCharm-Blog-13-Add-New-Paths-300x169.png 300w, http://127.0.0.1/wordpress/wp-content/uploads/2016/01/PyCharm-Blog-13-Add-New-Paths-768x434.png 768w, http://127.0.0.1/wordpress/wp-content/uploads/2016/01/PyCharm-Blog-13-Add-New-Paths.png 1264w&#34; sizes=&#34;(max-width: 620px) 100vw, 620px&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Click Ok and ensure that the Settings window is closed.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;http://127.0.0.1/wordpress/wp-content/uploads/2016/01/PyCharm-Blog-12-Save-Interpreter-Update.png&#34;&gt;&lt;img class=&#34;aligncenter wp-image-1388 size-large&#34; src=&#34;http://127.0.0.1/wordpress/wp-content/uploads/2016/01/PyCharm-Blog-12-Save-Interpreter-Update-1024x736.png&#34; alt=&#34;PyCharm-Blog-12-Save-Interpreter-Update&#34; width=&#34;620&#34; height=&#34;446&#34; srcset=&#34;http://127.0.0.1/wordpress/wp-content/uploads/2016/01/PyCharm-Blog-12-Save-Interpreter-Update-1024x736.png 1024w, http://127.0.0.1/wordpress/wp-content/uploads/2016/01/PyCharm-Blog-12-Save-Interpreter-Update-300x216.png 300w, http://127.0.0.1/wordpress/wp-content/uploads/2016/01/PyCharm-Blog-12-Save-Interpreter-Update-768x552.png 768w&#34; sizes=&#34;(max-width: 620px) 100vw, 620px&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;These steps complete the configuration of dependencies for our ML2 driver code. You may have to tweak these steps depending upon the kind of OpenStack programming you are doing.&lt;/p&gt;

&lt;h2 id=&#34;resolution-of-code-dependencies&#34;&gt;Resolution of code dependencies&lt;/h2&gt;

&lt;p&gt;Once the dependencies are configured, PyCharm will load the modules and resolve the code errors seen in our ML2 sample code. You should now see that the &amp;#8220;red underline&amp;#8221; for the &lt;em&gt;import&lt;/em&gt; statements are eliminated as shown below.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://127.0.0.1/wordpress/wp-content/uploads/2016/01/PyCharm-Blog-14-Code-No-Error.png&#34;&gt;&lt;img class=&#34;aligncenter wp-image-1376 size-large&#34; src=&#34;http://127.0.0.1/wordpress/wp-content/uploads/2016/01/PyCharm-Blog-14-Code-No-Error-1024x675.png&#34; alt=&#34;PyCharm Code No Error&#34; width=&#34;620&#34; height=&#34;409&#34; srcset=&#34;http://127.0.0.1/wordpress/wp-content/uploads/2016/01/PyCharm-Blog-14-Code-No-Error-1024x675.png 1024w, http://127.0.0.1/wordpress/wp-content/uploads/2016/01/PyCharm-Blog-14-Code-No-Error-300x198.png 300w, http://127.0.0.1/wordpress/wp-content/uploads/2016/01/PyCharm-Blog-14-Code-No-Error-768x506.png 768w&#34; sizes=&#34;(max-width: 620px) 100vw, 620px&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Once the code errors are resolved, you as a developer can continue with the rest of your programming. The additional benefit of resolving dependency is that PyCharm will &lt;em&gt;auto-complete&lt;/em&gt; the code as you type characters into your IDE. It will also perform syntax checks and provide instant feedback in case of errors. This helps in avoiding many programming errors and will save time.&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>ip vs. ifconfig – WILT</title>
      <link>http://reachsrirams.github.io/blogs/2015/11/27/ip-vs-ifconfig-wilt/</link>
      <pubDate>Fri, 27 Nov 2015 06:54:27 +0000</pubDate>
      
      <guid>http://reachsrirams.github.io/blogs/2015/11/27/ip-vs-ifconfig-wilt/</guid>
      
        <description>&lt;p&gt;One of the most popular networking command in Linux is the ifconfig command. It lets you see (and configure) IP address for network interface. It also shows the MAC address for each interface. The MAC address and the IP address viewing is probably the most common reason for using the ifconfig command. In addition the ifconfig command works with physical network interface (like eth0..) and virtual network interface (like &lt;a href=&#34;http://reachsrirams.github.io/blogs/blogs/2013/12/08/tap-interfaces-linux-bridge/&#34;&gt;Tap interface&lt;/a&gt; etc).
&lt;/p&gt;

&lt;h2 id=&#34;the-ip-command-replacement-for-ifconfig&#34;&gt;The ip Command - replacement for ifconfig&lt;/h2&gt;

&lt;p&gt;The ifconfig command is now being deprecated and the new kid on the block is the ip command.The ip command is part of the iproute2util package. The ip command consolidates many different networking commands into one. It is organized based on the networking stack - &lt;em&gt;ip link&lt;/em&gt; (Layer 2), &lt;em&gt;ip addr&lt;/em&gt; (Layer 3). The most promising capability of the ip command is the support for Namespace. The ip netns command let us run commands inside the Network Namespace (netns).&lt;/p&gt;

&lt;p&gt;Here is a quick comparison of commonly used ifconfig commands and how you can achieve the same with ip command.&lt;/p&gt;

&lt;h2 id=&#34;viewing-details-of-all-network-interfaces&#34;&gt;Viewing details of all network interfaces&lt;/h2&gt;

&lt;p&gt;To view both MAC address and IP address of all network interfaces use &amp;ldquo;ip addr&amp;rdquo; command. The same is achieved using &amp;ldquo;ifconfig&amp;rdquo; command also. However there is one key difference, the &amp;ldquo;ifconfig&amp;rdquo; command only shows the interfaces that are currently enabled. Note the missing &lt;strong&gt;eth2&lt;/strong&gt; in the ifconfig output below. The &amp;ldquo;ip addr&amp;rdquo; command shows interfaces that are disabled also. To do the same with &lt;em&gt;ifconfig&lt;/em&gt;, use the ifconfig with &amp;ldquo;-a&amp;rdquo; switch.&lt;/p&gt;


&lt;link rel=&#34;stylesheet&#34; href=&#34;http://reachsrirams.github.io/blogs/blogs/css/hugo-easy-gallery.css&#34; /&gt;
&lt;div class=&#34;box&#34; &gt;
  &lt;figure class=&#34;center&#34; itemprop=&#34;associatedMedia&#34; itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
    &lt;div class=&#34;img&#34;&gt;
      &lt;img itemprop=&#34;thumbnail&#34; src=&#34;http://reachsrirams.github.io/blogs/blogs/images/2015/ip-addr-1.png&#34; alt=&#34;ip addr command output&#34;/&gt;
    &lt;/div&gt;
    &lt;a href=&#34;http://reachsrirams.github.io/blogs/blogs/images/2015/ip-addr-1.png&#34; itemprop=&#34;contentUrl&#34;&gt;&lt;/a&gt;
      &lt;figcaption&gt;
          &lt;p&gt;ip addr command output&lt;/p&gt;
      &lt;/figcaption&gt;
  &lt;/figure&gt;
&lt;/div&gt;




&lt;div class=&#34;box&#34; &gt;
  &lt;figure class=&#34;center&#34; itemprop=&#34;associatedMedia&#34; itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
    &lt;div class=&#34;img&#34;&gt;
      &lt;img itemprop=&#34;thumbnail&#34; src=&#34;http://reachsrirams.github.io/blogs/blogs/images/2015/ifconfig-1.png&#34; alt=&#34;ifconfig command output&#34;/&gt;
    &lt;/div&gt;
    &lt;a href=&#34;http://reachsrirams.github.io/blogs/blogs/images/2015/ifconfig-1.png&#34; itemprop=&#34;contentUrl&#34;&gt;&lt;/a&gt;
      &lt;figcaption&gt;
          &lt;p&gt;ifconfig command output&lt;/p&gt;
      &lt;/figcaption&gt;
  &lt;/figure&gt;
&lt;/div&gt;


&lt;h2 id=&#34;viewing-information-for-a-specific-network-interface&#34;&gt;Viewing information for a specific network interface&lt;/h2&gt;

&lt;p&gt;With both &amp;ldquo;ip addr&amp;rdquo; and &amp;ldquo;ifconfig&amp;rdquo; commands it is possible to view the details of a specific interface as shown below.&lt;/p&gt;



&lt;div class=&#34;box&#34; &gt;
  &lt;figure class=&#34;center&#34; itemprop=&#34;associatedMedia&#34; itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
    &lt;div class=&#34;img&#34;&gt;
      &lt;img itemprop=&#34;thumbnail&#34; src=&#34;http://reachsrirams.github.io/blogs/blogs/images/2015/ip-addr-show.png&#34; alt=&#34;ip addr for a specific interface&#34;/&gt;
    &lt;/div&gt;
    &lt;a href=&#34;http://reachsrirams.github.io/blogs/blogs/images/2015/ip-addr-show.png&#34; itemprop=&#34;contentUrl&#34;&gt;&lt;/a&gt;
      &lt;figcaption&gt;
          &lt;p&gt;ip addr for a specific interface&lt;/p&gt;
      &lt;/figcaption&gt;
  &lt;/figure&gt;
&lt;/div&gt;




&lt;div class=&#34;box&#34; &gt;
  &lt;figure class=&#34;center&#34; itemprop=&#34;associatedMedia&#34; itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
    &lt;div class=&#34;img&#34;&gt;
      &lt;img itemprop=&#34;thumbnail&#34; src=&#34;http://reachsrirams.github.io/blogs/blogs/images/2015/ifconfig-eth0.png&#34; alt=&#34;ifconfig for a specific interface&#34;/&gt;
    &lt;/div&gt;
    &lt;a href=&#34;http://reachsrirams.github.io/blogs/blogs/images/2015/ifconfig-eth0.png&#34; itemprop=&#34;contentUrl&#34;&gt;&lt;/a&gt;
      &lt;figcaption&gt;
          &lt;p&gt;ifconfig for a specific interface&lt;/p&gt;
      &lt;/figcaption&gt;
  &lt;/figure&gt;
&lt;/div&gt;


&lt;h2 id=&#34;enable-or-disable-a-specific-network-interface&#34;&gt;Enable or Disable a specific network interface&lt;/h2&gt;

&lt;p&gt;The &amp;ldquo;ip link&amp;rdquo; command can be used to enable or disable a specific network interface. The same can also be accomplished using &amp;ldquo;ifconfig &lt;em&gt;interfacename&lt;/em&gt; up&amp;rdquo; or &amp;rdquo;ifconfig &lt;em&gt;interfacename&lt;/em&gt; down&amp;rdquo; command.&lt;/p&gt;

&lt;p&gt;The screenshot below shows an interface whose status is DOWN. Then the interface is enabled using the &amp;ldquo;ip link&amp;rdquo; command.&lt;/p&gt;



&lt;div class=&#34;box&#34; &gt;
  &lt;figure class=&#34;center&#34; itemprop=&#34;associatedMedia&#34; itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
    &lt;div class=&#34;img&#34;&gt;
      &lt;img itemprop=&#34;thumbnail&#34; src=&#34;http://reachsrirams.github.io/blogs/blogs/images/2015/ip-link-down.png&#34; alt=&#34;ip-link-down&#34;/&gt;
    &lt;/div&gt;
    &lt;a href=&#34;http://reachsrirams.github.io/blogs/blogs/images/2015/ip-link-down.png&#34; itemprop=&#34;contentUrl&#34;&gt;&lt;/a&gt;
  &lt;/figure&gt;
&lt;/div&gt;




&lt;div class=&#34;box&#34; &gt;
  &lt;figure class=&#34;center&#34; itemprop=&#34;associatedMedia&#34; itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
    &lt;div class=&#34;img&#34;&gt;
      &lt;img itemprop=&#34;thumbnail&#34; src=&#34;http://reachsrirams.github.io/blogs/blogs/images/2015/ip-link-down-up-show.png&#34; alt=&#34;ip-link-down-up-show&#34;/&gt;
    &lt;/div&gt;
    &lt;a href=&#34;http://reachsrirams.github.io/blogs/blogs/images/2015/ip-link-down-up-show.png&#34; itemprop=&#34;contentUrl&#34;&gt;&lt;/a&gt;
  &lt;/figure&gt;
&lt;/div&gt;


&lt;h2 id=&#34;viewing-neighbor-interface-information&#34;&gt;Viewing neighbor interface information&lt;/h2&gt;

&lt;p&gt;Viewing the information of neighboring interfaces is possible using the &amp;ldquo;ip neigh&amp;rdquo; command. &lt;strong&gt;This is not supported by the ifconfig command&lt;/strong&gt;. Instead users will have to use commands related to ARP or utilities such as &lt;strong&gt;ethtool&lt;/strong&gt; and &lt;strong&gt;lldpctl&lt;/strong&gt;.&lt;/p&gt;



&lt;div class=&#34;box&#34; &gt;
  &lt;figure class=&#34;center&#34; itemprop=&#34;associatedMedia&#34; itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
    &lt;div class=&#34;img&#34;&gt;
      &lt;img itemprop=&#34;thumbnail&#34; src=&#34;http://reachsrirams.github.io/blogs/blogs/images/2015/ip-neigh.png&#34; alt=&#34;View neighbor interface information&#34;/&gt;
    &lt;/div&gt;
    &lt;a href=&#34;http://reachsrirams.github.io/blogs/blogs/images/2015/ip-neigh.png&#34; itemprop=&#34;contentUrl&#34;&gt;&lt;/a&gt;
      &lt;figcaption&gt;
          &lt;p&gt;View neighbor interface information&lt;/p&gt;
      &lt;/figcaption&gt;
  &lt;/figure&gt;
&lt;/div&gt;</description>
      
    </item>
    
    <item>
      <title>Announcing: OpenStack Networking Cookbook</title>
      <link>http://reachsrirams.github.io/blogs/2015/10/23/openstack-networking-cookbook/</link>
      <pubDate>Fri, 23 Oct 2015 16:47:23 +0000</pubDate>
      
      <guid>http://reachsrirams.github.io/blogs/2015/10/23/openstack-networking-cookbook/</guid>
      
        <description>&lt;p&gt;My first publication &lt;strong&gt;&lt;a href=&#34;http://bit.ly/1NrKjty&#34;&gt;OpenStack Networking Cookbook&lt;/a&gt;&lt;/strong&gt; is now available for purchase. It is available as a printed book as well as e-book. OpenStack is a rapidly evolving cloud platform and Networking (Neutron) is one of its critical components. The current trends of SDN and NFV make OpenStack Networking even more exciting and complex. I have co-authored the book with a colleague and the overall experience of writing a book was very satisfying.
&lt;/p&gt;


&lt;link rel=&#34;stylesheet&#34; href=&#34;http://reachsrirams.github.io/blogs/blogs/css/hugo-easy-gallery.css&#34; /&gt;
&lt;div class=&#34;box&#34; &gt;
  &lt;figure class=&#34;center&#34; itemprop=&#34;associatedMedia&#34; itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
    &lt;div class=&#34;img&#34;&gt;
      &lt;img itemprop=&#34;thumbnail&#34; src=&#34;http://reachsrirams.github.io/blogs/blogs/images/2015/Book-Full-Cover.png&#34; alt=&#34;OpenStack Networking Cookbook&#34;/&gt;
    &lt;/div&gt;
    &lt;a href=&#34;http://reachsrirams.github.io/blogs/blogs/images/2015/Book-Full-Cover.png&#34; itemprop=&#34;contentUrl&#34;&gt;&lt;/a&gt;
      &lt;figcaption&gt;
          &lt;p&gt;OpenStack Networking Cookbook&lt;/p&gt;
      &lt;/figcaption&gt;
  &lt;/figure&gt;
&lt;/div&gt;


&lt;h2 id=&#34;openstack-networkng-cookbook-overview&#34;&gt;OpenStack Networkng Cookbook Overview&lt;/h2&gt;

&lt;p&gt;The OpenStack Networking Cookbook provides 90 hands on recipes to perform basic to advanced OpenStack Networking operations and administration. The book starts with basic Neutron constructs such as Network, Subnet and Port. Neutron services like Router, Firewall and Load-balancers are then covered. The book also offers great introduction to Ceilometer, ML2 mechanism driver development and Heat templates. All this in an easy to understand Cookbook format.&lt;/p&gt;

&lt;p&gt;The book is published by Packt Publishing who are leaders in technical book publications.&lt;/p&gt;

&lt;p&gt;As part of the book release, we have published an &lt;a href=&#34;https://goo.gl/PihuCb&#34;&gt;overview of Ceilometer and its use in OpenStack Networking&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;discount-coupons&#34;&gt;Discount Coupons&lt;/h2&gt;

&lt;p&gt;As part of the book launch and upcoming OpenStack Summit, our publishers (Packt Publishing) is giving great discounts on the OpenStack books. Here are the details:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Get e-books at 50% off using code: &lt;em&gt;OpenStack50&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Get print books at 30% off using code: &lt;em&gt;OpenStack30&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note: the codes are valid until Nov 15, 2015&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&#34;openstack-summit-2015-tokyo&#34;&gt;OpenStack Summit 2015 - Tokyo&lt;/h2&gt;

&lt;p&gt;The OpenStack Networking Cookbook is released in time for the OpenStack Summit 2015 in Tokyo. Along with two of my colleagues, I will be giving a talk at the Summit titled &lt;strong&gt;&lt;a href=&#34;https://goo.gl/LMpklQ&#34;&gt;Enhancing OpenStack FWaaS for real-world business needs&lt;/a&gt;&lt;/strong&gt;. During the Summit we will also be sharing discount coupons for our book.&lt;/p&gt;

&lt;h2 id=&#34;tweet-and-win&#34;&gt;Tweet and Win&lt;/h2&gt;

&lt;p&gt;Use #LoveOpenStackTokyo to share your comments, experiences or ask questions during the OpenStack Summit days. You could win &lt;strong&gt;free e-books&lt;/strong&gt; from Packt.&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>My goals for the second half of 2015</title>
      <link>http://reachsrirams.github.io/blogs/2015/07/05/my-goals-for-the-second-half-of-2015/</link>
      <pubDate>Sun, 05 Jul 2015 17:30:43 +0000</pubDate>
      
      <guid>http://reachsrirams.github.io/blogs/2015/07/05/my-goals-for-the-second-half-of-2015/</guid>
      
        <description>&lt;p&gt;As I have been doing for last few years, it is time to assess how well I have done on my blogging and learning goals. I will also share my goals for the second half of 2015.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h2 id=&#34;status-for-2015-first-half-goals&#34;&gt;Status for 2015 first half goals&lt;/h2&gt;

&lt;p&gt;Here is my assessment of the goals I had set out for myself:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Write 2 blogs related to OpenStack: this time I must blog about Open vSwitch and Neutron agents

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Score: &lt;sup&gt;9&lt;/sup&gt;&amp;frasl;&lt;sub&gt;10&lt;/sub&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Status: &lt;/strong&gt;While I wrote multiple blogs about OpenStack, I could not focus on Open vSwitch.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Write 2 blogs in the WILT series

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Score: &lt;sup&gt;5&lt;/sup&gt;&amp;frasl;&lt;sub&gt;10&lt;/sub&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Status: &lt;/strong&gt;I have learnt a lot this year but could write only one blog on the WILT series&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Create one YouTube video related to OpenStack or Networking

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Score: 0/10&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Status: &lt;/strong&gt;This is an easy one. No new YouTube video so the score is zero :).&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The first half of the year brought with it some very positive developments professionally. The biggest being the opportunity to write a &lt;a href=&#34;https://goo.gl/nCw8pc&#34; target=&#34;_blank&#34;&gt;book about OpenStack&lt;/a&gt;. I also spent considerable time developing &lt;a href=&#34;https://github.com/reachsrirams/openstack-scripts&#34;&gt;OpenStack install scripts for Juno release&lt;/a&gt;. Both activities kept me well occupied and overall it has been a great first half of the year. On the improvement side, I will try to space my blogs more evenly through out the 6 months.&lt;/p&gt;

&lt;h2 id=&#34;goals-for-the-second-half-of-2015&#34;&gt;Goals for the second half of 2015&lt;/h2&gt;

&lt;p&gt;The OpenStack book is due later this year and I definitely intend to work on the install scripts for OpenStack Kilo release. So continuing the theme of blogging and experimenting around OpenStack, her are my goals:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;YouTube video related to OpenStack &amp;#8211; making a video is not easy but I believe I have nailed down the topic for the video.&lt;/li&gt;
&lt;li&gt;Build and blog about a small OpenStack GUI related idea &amp;#8211; this could be 1-2 blogs&lt;/li&gt;
&lt;li&gt;Release the installation scripts for Kilo on Github&lt;/li&gt;
&lt;li&gt;Write a management related blog on LinkedIn &amp;#8211; something new that I want to attempt&lt;/li&gt;
&lt;li&gt;Write 1 blog in the WILT series&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The ground work for some these goals are already in place. However with the release of the book later this year, I need to manage my time well to meet these goals.&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>Ports in OpenStack Neutron</title>
      <link>http://reachsrirams.github.io/blogs/2015/07/04/ports-in-openstack-neutron/</link>
      <pubDate>Sat, 04 Jul 2015 18:55:10 +0000</pubDate>
      
      <guid>http://reachsrirams.github.io/blogs/2015/07/04/ports-in-openstack-neutron/</guid>
      
        <description>&lt;p&gt;OpenStack supports rich abstractions to handle &lt;a href=&#34;http://reachsrirams.github.io/blogs/blogs/2014/04/06/openstack-networking/&#34;&gt;virtual networking needs in a cloud&lt;/a&gt;. As a user the most visible entities are the Network, Subnets, Routers, Firewall etc. But if we consider ingress and egress points for data traffic, the most critical entity is the Port. OpenStack Neutron Ports are usually created automatically as part of other user operations. However the CLI allows users to create Ports independently as well.
&lt;/p&gt;

&lt;h2 id=&#34;why-are-ports-important&#34;&gt;Why are Ports important?&lt;/h2&gt;

&lt;p&gt;Ports in OpenStack networking are realized using interfaces (mostly virtual) on the underlying hypervisor. IP addresses used for virtual machines, routers etc are actually stored with the Port entities. Given that Ports represent entry and exit points for data traffic and also the associated configurations such as interface and IP address, they play an important role in OpenStack networking.&lt;/p&gt;

&lt;h2 id=&#34;types-of-ports-in-openstack&#34;&gt;Types of Ports in OpenStack&lt;/h2&gt;

&lt;p&gt;We will use the following virtual network topology to understand the different types of ports created in OpenStack.&lt;/p&gt;


&lt;link rel=&#34;stylesheet&#34; href=&#34;http://reachsrirams.github.io/blogs/blogs/css/hugo-easy-gallery.css&#34; /&gt;
&lt;div class=&#34;box&#34; &gt;
  &lt;figure class=&#34;center&#34; itemprop=&#34;associatedMedia&#34; itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
    &lt;div class=&#34;img&#34;&gt;
      &lt;img itemprop=&#34;thumbnail&#34; src=&#34;http://reachsrirams.github.io/blogs/blogs/images/2015/Topology-OpenStack-Ports-1.png&#34; alt=&#34;Topology for OpenStack Ports&#34;/&gt;
    &lt;/div&gt;
    &lt;a href=&#34;http://reachsrirams.github.io/blogs/blogs/images/2015/Topology-OpenStack-Ports-1.png&#34; itemprop=&#34;contentUrl&#34;&gt;&lt;/a&gt;
      &lt;figcaption&gt;
          &lt;p&gt;Topology for OpenStack Ports&lt;/p&gt;
      &lt;/figcaption&gt;
  &lt;/figure&gt;
&lt;/div&gt;


&lt;p&gt;In the above picture, we have two Tenant Networks with each network having one virtual machine and a DHCP server. The two Networks are connected to each other using a Tenant Router. In addition, we will use an External Network and set it as the gateway on the Tenant Router so that virtual machines have Internet access. The corresponding OpenStack Network Topology looks like this:&lt;/p&gt;



&lt;div class=&#34;box&#34; &gt;
  &lt;figure class=&#34;center&#34; itemprop=&#34;associatedMedia&#34; itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
    &lt;div class=&#34;img&#34;&gt;
      &lt;img itemprop=&#34;thumbnail&#34; src=&#34;http://reachsrirams.github.io/blogs/blogs/images/2015/OpenStack-Ports-Network-Topology.png&#34; alt=&#34;OpenStack Ports Network Topology&#34;/&gt;
    &lt;/div&gt;
    &lt;a href=&#34;http://reachsrirams.github.io/blogs/blogs/images/2015/OpenStack-Ports-Network-Topology.png&#34; itemprop=&#34;contentUrl&#34;&gt;&lt;/a&gt;
      &lt;figcaption&gt;
          &lt;p&gt;OpenStack Ports Network Topology&lt;/p&gt;
      &lt;/figcaption&gt;
  &lt;/figure&gt;
&lt;/div&gt;


&lt;p&gt;To view the port types in your OpenStack setup, pay attention to the &amp;lsquo;device_owner&amp;rsquo; attribute of the port as shown the CLI output here.&lt;/p&gt;



&lt;div class=&#34;box&#34; &gt;
  &lt;figure class=&#34;center&#34; itemprop=&#34;associatedMedia&#34; itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
    &lt;div class=&#34;img&#34;&gt;
      &lt;img itemprop=&#34;thumbnail&#34; src=&#34;http://reachsrirams.github.io/blogs/blogs/images/2015/OpenStack-Ports-CLI-Output.png&#34; alt=&#34;OpenStack Ports CLI Output&#34;/&gt;
    &lt;/div&gt;
    &lt;a href=&#34;http://reachsrirams.github.io/blogs/blogs/images/2015/OpenStack-Ports-CLI-Output.png&#34; itemprop=&#34;contentUrl&#34;&gt;&lt;/a&gt;
      &lt;figcaption&gt;
          &lt;p&gt;OpenStack Ports CLI Output&lt;/p&gt;
      &lt;/figcaption&gt;
  &lt;/figure&gt;
&lt;/div&gt;


&lt;p&gt;Let us now see the different types of ports associated with this topology.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;compute:nova&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&amp;lsquo;compute:nova&amp;rsquo; indicates that the port is associated with a virtual machine. These ports are usually auto-created as part of the instance creation (via Nova). The &amp;lsquo;compute&amp;rsquo; part indicates that the port is created on compute nodes.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;network:dhcp&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&amp;lsquo;network:dhcp&amp;rsquo; indicates that the port is associated with a DHCP server. The word &amp;lsquo;network&amp;rsquo; imples that this port is created on the Network node. The DHCP port is created when the first virtual machine instance is started on the &lt;em&gt;corresponding&lt;/em&gt; network.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;network:router_interface&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The &amp;lsquo;network:router_interface&amp;rsquo; represents the &amp;lsquo;gateway&amp;rsquo; IP interface for a tenant network and its VMs. This interface is associated to an OpenStack router (namespace). Ports of this type are created when a user does a &amp;lsquo;Add Interface&amp;rsquo; operation on a Router. You will see two such &amp;lsquo;network:router_interface&amp;rsquo; ports - one for each Network in our example. Once again, this port type is also seen on the Network Node.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;network:router_gateway&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;For a Router, the External Network represents the &amp;lsquo;gateway&amp;rsquo; to the outside world (Internet). So a special port of type &amp;lsquo;network:router_gateway&amp;rsquo; is created for this. This port is created with a user does &amp;lsquo;Set Gateway&amp;rsquo; operation on a Router and resides on the Network node.&lt;/p&gt;</description>
      
    </item>
    
  </channel>
</rss>