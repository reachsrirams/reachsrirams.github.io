<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Networking on Sriram S - Innervoice</title>
    <link>http://reachsrirams.github.io/blogs/categories/networking/</link>
    <description>Recent content in Networking on Sriram S - Innervoice</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Sun, 22 Jan 2017 17:42:35 +0000</lastBuildDate>
    
	<atom:link href="http://reachsrirams.github.io/blogs/categories/networking/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>OpenStack Horizon: extending the dashboard – Part 2</title>
      <link>http://reachsrirams.github.io/blogs/2017/01/22/openstack-horizon-extending-dashboard-part-2/</link>
      <pubDate>Sun, 22 Jan 2017 17:42:35 +0000</pubDate>
      
      <guid>http://reachsrirams.github.io/blogs/2017/01/22/openstack-horizon-extending-dashboard-part-2/</guid>
      <description>In this second installment of my blog on OpenStack Horizon, I will take you through different source code files that make a custom OpenStack dashboard. As a recap from the first installment, I will show you how to create a custom dashboard to view all the Neutron &amp;#8220;ports&amp;#8221; in your OpenStack based cloud.
Enabling OpenStack Horizon Dashboard Django framework loads and enables dashboards based on entries present in the enabled directory of OpenStack Dashboard.</description>
    </item>
    
    <item>
      <title>ip vs. ifconfig – WILT</title>
      <link>http://reachsrirams.github.io/blogs/2015/11/27/ip-vs-ifconfig-wilt/</link>
      <pubDate>Fri, 27 Nov 2015 06:54:27 +0000</pubDate>
      
      <guid>http://reachsrirams.github.io/blogs/2015/11/27/ip-vs-ifconfig-wilt/</guid>
      <description>&lt;p&gt;One of the most popular networking command in Linux is the ifconfig command. It lets you see (and configure) IP address for network interface. It also shows the MAC address for each interface. The MAC address and the IP address viewing is probably the most common reason for using the ifconfig command. In addition the ifconfig command works with physical network interface (like eth0..) and virtual network interface (like &lt;a href=&#34;http://reachsrirams.github.io/blogs/blogs/2013/12/08/tap-interfaces-linux-bridge/&#34;&gt;Tap interface&lt;/a&gt; etc).
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Announcing: OpenStack Networking Cookbook</title>
      <link>http://reachsrirams.github.io/blogs/2015/10/23/openstack-networking-cookbook/</link>
      <pubDate>Fri, 23 Oct 2015 16:47:23 +0000</pubDate>
      
      <guid>http://reachsrirams.github.io/blogs/2015/10/23/openstack-networking-cookbook/</guid>
      <description>&lt;p&gt;My first publication &lt;strong&gt;&lt;a href=&#34;http://bit.ly/1NrKjty&#34;&gt;OpenStack Networking Cookbook&lt;/a&gt;&lt;/strong&gt; is now available for purchase. It is available as a printed book as well as e-book. OpenStack is a rapidly evolving cloud platform and Networking (Neutron) is one of its critical components. The current trends of SDN and NFV make OpenStack Networking even more exciting and complex. I have co-authored the book with a colleague and the overall experience of writing a book was very satisfying.
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Ports in OpenStack Neutron</title>
      <link>http://reachsrirams.github.io/blogs/2015/07/04/ports-in-openstack-neutron/</link>
      <pubDate>Sat, 04 Jul 2015 18:55:10 +0000</pubDate>
      
      <guid>http://reachsrirams.github.io/blogs/2015/07/04/ports-in-openstack-neutron/</guid>
      <description>&lt;p&gt;OpenStack supports rich abstractions to handle &lt;a href=&#34;http://reachsrirams.github.io/blogs/blogs/2014/04/06/openstack-networking/&#34;&gt;virtual networking needs in a cloud&lt;/a&gt;. As a user the most visible entities are the Network, Subnets, Routers, Firewall etc. But if we consider ingress and egress points for data traffic, the most critical entity is the Port. OpenStack Neutron Ports are usually created automatically as part of other user operations. However the CLI allows users to create Ports independently as well.
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>VirtualBox networking settings for OpenStack</title>
      <link>http://reachsrirams.github.io/blogs/2015/06/14/virtualbox-networking-settings-for-openstack/</link>
      <pubDate>Sun, 14 Jun 2015 14:58:44 +0000</pubDate>
      
      <guid>http://reachsrirams.github.io/blogs/2015/06/14/virtualbox-networking-settings-for-openstack/</guid>
      <description>&lt;p&gt;The best way to learn OpenStack is by installing, running and playing with it directly. In this blog, I will share the details of the VirtualBox based multi-node OpenStack installation. I will be focusing &lt;strong&gt;only on the networking aspects when using VirtualBox&lt;/strong&gt;. I will also share some tips that are important in this deployment. This blog will not cover the steps to install and create a virtual machine using VirtualBox.

While most people use DevStack to accomplish this I prefer to setup a multi-node installation. This is important for me because much of my work related to OpenStack revolves around Networking. Another reason is that a multi-node installation is what real users of OpenStack will also be deploying.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>OpenStack Neutron Plugins and Agents</title>
      <link>http://reachsrirams.github.io/blogs/2015/03/31/openstack-neutron-plugins-and-agents/</link>
      <pubDate>Tue, 31 Mar 2015 16:55:40 +0000</pubDate>
      
      <guid>http://reachsrirams.github.io/blogs/2015/03/31/openstack-neutron-plugins-and-agents/</guid>
      <description>&lt;p&gt;I briefly talked about OpenStack Neutron plugins and agents in &lt;a href=&#34;http://reachsrirams.github.io/blogs/blogs/2015/01/13/openstack-neutron-components/&#34;&gt;my blog about OpenStack Neutron components&lt;/a&gt;. In this blog, let us go a step further and understand the roles of plugins and the agents.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Using MAC table – Linux Bridge – WILT</title>
      <link>http://reachsrirams.github.io/blogs/2015/01/26/using-mac-table-linux-bridge-wilt/</link>
      <pubDate>Mon, 26 Jan 2015 16:19:23 +0000</pubDate>
      
      <guid>http://reachsrirams.github.io/blogs/2015/01/26/using-mac-table-linux-bridge-wilt/</guid>
      <description>&lt;p&gt;In an &lt;a href=&#34;http://reachsrirams.github.io/blogs/blogs/2013/12/02/linux-bridge-virtual-networking/&#34;&gt;earlier blog&lt;/a&gt;, I have talked about Linux bridge based virtual networking. Recently as part of a comment on my blog, I learnt how to view and interpret the MAC table of Linux bridge. In this installment of WILT (What I Learnt Today) series, I will share how MAC Table can be used for troubleshooting Linux bridges.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>OpenStack Neutron – the components</title>
      <link>http://reachsrirams.github.io/blogs/2015/01/13/openstack-neutron-components/</link>
      <pubDate>Tue, 13 Jan 2015 18:20:22 +0000</pubDate>
      
      <guid>http://reachsrirams.github.io/blogs/2015/01/13/openstack-neutron-components/</guid>
      <description>&lt;p&gt;Neutron is the networking project within the OpenStack cloud platform. The purpose of OpenStack Neutron is to provide physical and virtual network resources to the instances (or virtual machines). Before you continue to read this article I would recommend that you read about &lt;a href=&#34;http://reachsrirams.github.io/blogs/blogs/2014/04/06/openstack-networking/&#34;&gt;OpenStack networking concepts&lt;/a&gt;. To appreciate the architecture and the functionality of Neutron, it is important to understand the components that are part of Neutron.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Linux Network Namespace – WILT</title>
      <link>http://reachsrirams.github.io/blogs/2014/12/17/linux-network-namespace-wilt/</link>
      <pubDate>Wed, 17 Dec 2014 18:05:29 +0000</pubDate>
      
      <guid>http://reachsrirams.github.io/blogs/2014/12/17/linux-network-namespace-wilt/</guid>
      <description>&lt;p&gt;In the next installment of &amp;ldquo;What I learnt today&amp;rdquo; or WILT, I briefly touch upon Network Namespace. I came across Namespace as part of my ongoing study of OpenStack networking. Namespaces are powerful constructs in Linux that allows you to create a &lt;strong&gt;copy of the TCP/IP network stack &amp;#8211; all the way from the Ethernet interfaces (L2), routing tables etc.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Setting up OpenStack at home</title>
      <link>http://reachsrirams.github.io/blogs/2014/11/13/setting-openstack-home/</link>
      <pubDate>Thu, 13 Nov 2014 18:26:12 +0000</pubDate>
      
      <guid>http://reachsrirams.github.io/blogs/2014/11/13/setting-openstack-home/</guid>
      <description>The goal of this blog is to share some details about how I have setup a cost-effective OpenStack Lab at home. For most enthusiasts, DevStack is the preferred way to experiment with OpenStack. But I wanted something more realistic for my experiments.
OpenStack is intended for multi-tenant, distributed and highly scalable cloud. To appreciate its architecture I needed to move beyond DevStack. With a more realistic setup, you can understand how the distributed OpenStack components interact with each other.</description>
    </item>
    
    <item>
      <title>Wired and Wireless network on Ubuntu for OpenStack</title>
      <link>http://reachsrirams.github.io/blogs/2014/06/29/wired-wireless-network-ubuntu-openstack/</link>
      <pubDate>Sun, 29 Jun 2014 18:16:37 +0000</pubDate>
      
      <guid>http://reachsrirams.github.io/blogs/2014/06/29/wired-wireless-network-ubuntu-openstack/</guid>
      <description>&lt;p&gt;In data center and cloud environment, servers used for hosting the virtual machines usually have more than one wired networking interfaces. In fact there are multiple Ethernet interfaces on each server. It is common practice to use one of the interface for &amp;lsquo;managing&amp;rsquo; the host itself. This interface is usually accessible from corporate networks and administrators will use this interface for doing SSH into the server. The other interfaces are usually used for virtual machine traffic or storage traffic.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>OpenStack Networking – an introduction</title>
      <link>http://reachsrirams.github.io/blogs/2014/04/06/openstack-networking/</link>
      <pubDate>Sun, 06 Apr 2014 19:56:02 +0000</pubDate>
      
      <guid>http://reachsrirams.github.io/blogs/2014/04/06/openstack-networking/</guid>
      <description>&lt;p&gt;I continue the series on virtual networking with an overview of OpenStack networking concepts. OpenStack is an open source project with an aim to create a scalable cloud operating platform. The primary goal of this software platform is to help build public and private clouds. Specifically it allows users to build and operate infrastructure as a service or &lt;strong&gt;IaaS&lt;/strong&gt; clouds.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Introduction to VMware Virtual Networking</title>
      <link>http://reachsrirams.github.io/blogs/2014/02/16/introduction-vmware-virtual-networking/</link>
      <pubDate>Sun, 16 Feb 2014 18:15:07 +0000</pubDate>
      
      <guid>http://reachsrirams.github.io/blogs/2014/02/16/introduction-vmware-virtual-networking/</guid>
      <description>In the previous blog we saw how Linux supports virtual networking using bridges. VMware vSphere is the most popular hypervisor brand in the world and it is natural that it also supports virtual networking. In fact vSphere supports some very advanced networking functions, that are not available in most of the other hypervisors.
Let me introduce the key elements of VMware virtual networking. After reading this blog, I recommend that you read the official guide about virtual networking.</description>
    </item>
    
    <item>
      <title>Tap Interfaces and Linux Bridge</title>
      <link>http://reachsrirams.github.io/blogs/2013/12/08/tap-interfaces-linux-bridge/</link>
      <pubDate>Sun, 08 Dec 2013 06:56:00 +0000</pubDate>
      
      <guid>http://reachsrirams.github.io/blogs/2013/12/08/tap-interfaces-linux-bridge/</guid>
      <description>&lt;p&gt;In the &lt;a href=&#34;http://reachsrirams.github.io/blogs/blogs/2013/12/02/linux-bridge-virtual-networking/&#34;&gt;previous blog of this series&lt;/a&gt; we saw that using Linux bridge we can connect a virtual Ethernet port of a VM to the physical Ethernet port of the hypervisor server. Let us now focus a bit more on these virtual ports to see what happens behind the scenes to make virtual networking actually work.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Linux Bridge and Virtual Networking</title>
      <link>http://reachsrirams.github.io/blogs/2013/12/02/linux-bridge-virtual-networking/</link>
      <pubDate>Mon, 02 Dec 2013 18:00:47 +0000</pubDate>
      
      <guid>http://reachsrirams.github.io/blogs/2013/12/02/linux-bridge-virtual-networking/</guid>
      <description>&lt;p&gt;Software defined networking (SDN) is the current wave sweeping the networking industry. And one of the key enablers of SDN is virtual networking. While SDN and virtual networking are in vogue these days, the support for virtual networking is not a recent development. And Linux bridge has been the pioneer in this regard.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Networking Nuggets – Hub vs Bridge vs Switch</title>
      <link>http://reachsrirams.github.io/blogs/2013/07/14/networking-nuggets-1/</link>
      <pubDate>Sun, 14 Jul 2013 19:28:32 +0000</pubDate>
      
      <guid>http://reachsrirams.github.io/blogs/2013/07/14/networking-nuggets-1/</guid>
      <description>&lt;p&gt;Here is an overview of three basic networking devices &amp;#8211; Hub, Bridge and a Switch. This blog and the related &lt;a href=&#34;#youtubevideo&#34;&gt;YouTube video&lt;/a&gt; will be useful for upcoming topics related to virtual networking such as Linux Bridge and Open vSwitch. &lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Networking Concepts – the fundamentals</title>
      <link>http://reachsrirams.github.io/blogs/2013/07/07/fundamental-networking-concepts/</link>
      <pubDate>Sun, 07 Jul 2013 09:02:53 +0000</pubDate>
      
      <guid>http://reachsrirams.github.io/blogs/2013/07/07/fundamental-networking-concepts/</guid>
      <description>&lt;p&gt;In my first YouTube video, I discuss 3 networking concepts:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;span style=&#34;line-height: 13px;&#34;&gt;Default Gateway&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;DNS Server&lt;/li&gt;
&lt;li&gt;Subnet Mask&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Understanding Virtual Networks – Ports and VLAN</title>
      <link>http://reachsrirams.github.io/blogs/2012/08/30/understanding-virtual-networks-ports-and-vlan/</link>
      <pubDate>Thu, 30 Aug 2012 18:01:24 +0000</pubDate>
      
      <guid>http://reachsrirams.github.io/blogs/2012/08/30/understanding-virtual-networks-ports-and-vlan/</guid>
      <description>&lt;p&gt;In the &lt;a href=&#34;http://reachsrirams.github.io/blogs/blogs/2012/08/16/understanding-virtual-networks-the-basics/&#34;&gt;previous post&lt;/a&gt; we looked at the fundamental building blocks of physical and virtual networks. Now let us look at two key concepts in physical and virtual networks. They are Ports and VLAN.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Understanding Virtual Networks – The Basics</title>
      <link>http://reachsrirams.github.io/blogs/2012/08/16/understanding-virtual-networks-the-basics/</link>
      <pubDate>Thu, 16 Aug 2012 04:35:41 +0000</pubDate>
      
      <guid>http://reachsrirams.github.io/blogs/2012/08/16/understanding-virtual-networks-the-basics/</guid>
      <description>&lt;p&gt;In order understand Virtual Networking let us start with the simplest network that many of us operate every day – our home network. The picture below captures what a typical home network looks like. I am sure most of us use wireless rather than wired networks at home but the underlying concepts are very much alike.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Understanding Virtual Networks</title>
      <link>http://reachsrirams.github.io/blogs/2012/08/16/understanding-virtual-networks/</link>
      <pubDate>Thu, 16 Aug 2012 04:34:57 +0000</pubDate>
      
      <guid>http://reachsrirams.github.io/blogs/2012/08/16/understanding-virtual-networks/</guid>
      <description>&lt;p&gt;Upcoming technologies like OpenFlow and SDN are altering the networking landscape very quickly. The underlying drivers are Cloud Computing and Virtualization. Servers, Storage and Networking make up the trinity for effective Cloud computing strategy. Servers and Storage Virtualization has helped drive the adoption of flexible cloud services already. Now it is time for Network Virtualization.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>