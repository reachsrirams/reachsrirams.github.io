<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Technology on Sriram S - Innervoice</title>
    <link>http://reachsrirams.github.io/blogs/categories/technology/</link>
    <description>Recent content in Technology on Sriram S - Innervoice</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Sun, 26 Nov 2017 05:15:30 +0000</lastBuildDate>
    
	<atom:link href="http://reachsrirams.github.io/blogs/categories/technology/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Docker Compose with nginx and NodeJS</title>
      <link>http://reachsrirams.github.io/blogs/2017/11/26/docker-compose-nginx-nodejs/</link>
      <pubDate>Sun, 26 Nov 2017 05:15:30 +0000</pubDate>
      
      <guid>http://reachsrirams.github.io/blogs/2017/11/26/docker-compose-nginx-nodejs/</guid>
      <description>&lt;p&gt;If you are a follower of this blog, you might have read about &lt;a href=&#34;http://reachsrirams.github.io/blogs/blogs/2017/11/19/using-docker-nginx-nodejs/&#34;&gt;Using Docker with nginx and NodeJS&lt;/a&gt;. In this blog, I will discuss the code to build  the two containers using Docker Compose. Finally, I will highlight an important capability of Docker that I learnt in this exercise. The source code being referred in this blog is &lt;a href=&#34;https://goo.gl/sBmSt3&#34;&gt;available on GitHub&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Using Docker with nginx and NodeJS</title>
      <link>http://reachsrirams.github.io/blogs/2017/11/19/using-docker-nginx-nodejs/</link>
      <pubDate>Sun, 19 Nov 2017 05:56:48 +0000</pubDate>
      
      <guid>http://reachsrirams.github.io/blogs/2017/11/19/using-docker-nginx-nodejs/</guid>
      <description>&lt;p&gt;The best way to learn a new technology is by doing some hands-on practice or exercise. In order to learn the basics of Docker, I was scouting for a problem and the one that captured my imagination was how to use Docker for handling static web pages and dynamic REST APIs. In this 2-part blog, I will describe the problem and the solution first and then show how I implemented the solution using Docker.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Ocata release install scripts for OpenStack</title>
      <link>http://reachsrirams.github.io/blogs/2017/06/03/ocata-openstack-install/</link>
      <pubDate>Sat, 03 Jun 2017 02:39:12 +0000</pubDate>
      
      <guid>http://reachsrirams.github.io/blogs/2017/06/03/ocata-openstack-install/</guid>
      <description>Ocata is the most recent release of OpenStack. I would like to share scripts that can be used to install the Ocata is the most recent release of OpenStack. I would like to share scripts that can be used to install the server as per the installation guide. This is a collection of scripts that should help you get going with OpenStack&amp;rsquo;s latest release. I have been developing these scripts to help me with my blogging and personal learning projects</description>
    </item>
    
    <item>
      <title>Newton release install scripts for OpenStack</title>
      <link>http://reachsrirams.github.io/blogs/2017/05/02/openstack-newton-install/</link>
      <pubDate>Tue, 02 May 2017 05:07:42 +0000</pubDate>
      
      <guid>http://reachsrirams.github.io/blogs/2017/05/02/openstack-newton-install/</guid>
      <description>Newton is one the recent releases of OpenStack. I would like to share scripts that can be used to install the Newton release of OpenStack on Ubuntu 16.04 as per the installation guide. As part of my blogging, book writing projects, I have the need to install OpenStack many times. And I have been automating the installation by writing simple shell scripts. The result is a collection of scripts that should help you get going with OpenStack&amp;rsquo;s latest release.</description>
    </item>
    
    <item>
      <title>OpenStack Horizon: extending the dashboard – Part 2</title>
      <link>http://reachsrirams.github.io/blogs/2017/01/22/openstack-horizon-extending-dashboard-part-2/</link>
      <pubDate>Sun, 22 Jan 2017 17:42:35 +0000</pubDate>
      
      <guid>http://reachsrirams.github.io/blogs/2017/01/22/openstack-horizon-extending-dashboard-part-2/</guid>
      <description>In this second installment of my blog on OpenStack Horizon, I will take you through different source code files that make a custom OpenStack dashboard. As a recap from the first installment, I will show you how to create a custom dashboard to view all the Neutron &amp;ldquo;ports&amp;rdquo; in your OpenStack based cloud.
Enabling OpenStack Horizon Dashboard Django framework loads and enables dashboards based on entries present in the enabled directory of OpenStack Dashboard.</description>
    </item>
    
    <item>
      <title>OpenStack Horizon: extending the dashboard – Part 1</title>
      <link>http://reachsrirams.github.io/blogs/2016/12/27/openstack-horizon-customizing-the-dashboard/</link>
      <pubDate>Tue, 27 Dec 2016 10:31:44 +0000</pubDate>
      
      <guid>http://reachsrirams.github.io/blogs/2016/12/27/openstack-horizon-customizing-the-dashboard/</guid>
      <description>&lt;p&gt;OpenStack Horizon is the project that provides the web based dashboard for OpenStack based clouds. In this 2-part blog I will show you how you can extend the dashboard. Customizing and extending is one of the most powerful capabilities in OpenStack and in private cloud environments it is common to add additional enhancements to address an organization&amp;rsquo;s needs.
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>WILT – mysql, root and sudo</title>
      <link>http://reachsrirams.github.io/blogs/2016/11/13/wilt-mysql-root-and-sudo/</link>
      <pubDate>Sun, 13 Nov 2016 16:44:06 +0000</pubDate>
      
      <guid>http://reachsrirams.github.io/blogs/2016/11/13/wilt-mysql-root-and-sudo/</guid>
      <description>I came across an interesting behavior that helped me learn something about MySQL (MariaDB to be precise) authentication. In this WILT blog I will talk about the &amp;ldquo;unix socket&amp;rdquo; authentication plugin in MySQL/MariaDB. The steps shown in this blog have been tried on Ubuntu 16.04 and MariaDB Server 10.
MariaDB Install and root user In some earlier versions of MySQL as well as MariaDB server, the installation process required you to enter password for root user.</description>
    </item>
    
    <item>
      <title>Mitaka on Ubuntu – install scripts for OpenStack</title>
      <link>http://reachsrirams.github.io/blogs/2016/07/06/mitaka-on-ubuntu-install-scripts-for-openstack/</link>
      <pubDate>Wed, 06 Jul 2016 06:45:45 +0000</pubDate>
      
      <guid>http://reachsrirams.github.io/blogs/2016/07/06/mitaka-on-ubuntu-install-scripts-for-openstack/</guid>
      <description>&lt;p&gt;Mitaka is the most recent release of OpenStack and currently it is supports &lt;a href=&#34;http://docs.openstack.org/mitaka/install-guide-ubuntu/&#34;&gt;Ubuntu 14.04 LTS (trusty)&lt;/a&gt;. I would like to share scripts that can be used to install the Mitaka release of OpenStack on Ubuntu. As part of my blogging, book writing projects, I have had the need to install OpenStack many times. And I have been automating the installation by writing simple shell scripts. The result is a collection of scripts that should help you get going with OpenStack&amp;rsquo;s latest release.
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>OpenStack Controller Logs – view using a browser</title>
      <link>http://reachsrirams.github.io/blogs/2016/06/27/openstack-controller-logs-view-using-browser/</link>
      <pubDate>Mon, 27 Jun 2016 18:22:07 +0000</pubDate>
      
      <guid>http://reachsrirams.github.io/blogs/2016/06/27/openstack-controller-logs-view-using-browser/</guid>
      <description>&lt;p&gt;OpenStack is made up of various services. These services have their own logs stored under /var/log directory. While working on OpenStack related projects it is quite common to monitor the logs for any problems or errors. While the tail command is the most popular, there are many benefits of using web browser to view the logs. In this blog let us see how we can view OpenStack Controller Logs using a browser.
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>PyCharm and OpenStack programming</title>
      <link>http://reachsrirams.github.io/blogs/2016/01/02/pycharm-and-openstack-programming/</link>
      <pubDate>Sat, 02 Jan 2016 17:43:51 +0000</pubDate>
      
      <guid>http://reachsrirams.github.io/blogs/2016/01/02/pycharm-and-openstack-programming/</guid>
      <description>&lt;p&gt;OpenStack is based on the Python programming language and DevStack is the most common development and test environment for OpenStack. If you are doing serious, professional programming around OpenStack, it is very useful to have a proper development environment. In this blog, I will show you how to use the &lt;strong&gt;PyCharm IDE&lt;/strong&gt; from Jetbrains for your OpenStack programming. I will use the &lt;strong&gt;Neutron ML2 driver code from my book &lt;a href=&#34;http://goo.gl/TeXSYQ&#34;&gt;OpenStack Networking Cookbook&lt;/a&gt; to guide you&lt;/strong&gt; in setting up the PyCharm IDE.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Announcing: OpenStack Networking Cookbook</title>
      <link>http://reachsrirams.github.io/blogs/2015/10/23/openstack-networking-cookbook/</link>
      <pubDate>Fri, 23 Oct 2015 16:47:23 +0000</pubDate>
      
      <guid>http://reachsrirams.github.io/blogs/2015/10/23/openstack-networking-cookbook/</guid>
      <description>&lt;p&gt;My first publication &lt;strong&gt;&lt;a href=&#34;http://bit.ly/1NrKjty&#34;&gt;OpenStack Networking Cookbook&lt;/a&gt;&lt;/strong&gt; is now available for purchase. It is available as a printed book as well as e-book. OpenStack is a rapidly evolving cloud platform and Networking (Neutron) is one of its critical components. The current trends of SDN and NFV make OpenStack Networking even more exciting and complex. I have co-authored the book with a colleague and the overall experience of writing a book was very satisfying.
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Ports in OpenStack Neutron</title>
      <link>http://reachsrirams.github.io/blogs/2015/07/04/ports-in-openstack-neutron/</link>
      <pubDate>Sat, 04 Jul 2015 18:55:10 +0000</pubDate>
      
      <guid>http://reachsrirams.github.io/blogs/2015/07/04/ports-in-openstack-neutron/</guid>
      <description>&lt;p&gt;OpenStack supports rich abstractions to handle &lt;a href=&#34;http://reachsrirams.github.io/blogs/blogs/2014/04/06/openstack-networking/&#34;&gt;virtual networking needs in a cloud&lt;/a&gt;. As a user the most visible entities are the Network, Subnets, Routers, Firewall etc. But if we consider ingress and egress points for data traffic, the most critical entity is the Port. OpenStack Neutron Ports are usually created automatically as part of other user operations. However the CLI allows users to create Ports independently as well.
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>OpenStack Neutron Plugins and Agents</title>
      <link>http://reachsrirams.github.io/blogs/2015/03/31/openstack-neutron-plugins-and-agents/</link>
      <pubDate>Tue, 31 Mar 2015 16:55:40 +0000</pubDate>
      
      <guid>http://reachsrirams.github.io/blogs/2015/03/31/openstack-neutron-plugins-and-agents/</guid>
      <description>&lt;p&gt;I briefly talked about OpenStack Neutron plugins and agents in &lt;a href=&#34;http://reachsrirams.github.io/blogs/blogs/2015/01/13/openstack-neutron-components/&#34;&gt;my blog about OpenStack Neutron components&lt;/a&gt;. In this blog, let us go a step further and understand the roles of plugins and the agents.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Using MAC table – Linux Bridge – WILT</title>
      <link>http://reachsrirams.github.io/blogs/2015/01/26/using-mac-table-linux-bridge-wilt/</link>
      <pubDate>Mon, 26 Jan 2015 16:19:23 +0000</pubDate>
      
      <guid>http://reachsrirams.github.io/blogs/2015/01/26/using-mac-table-linux-bridge-wilt/</guid>
      <description>&lt;p&gt;In an &lt;a href=&#34;http://reachsrirams.github.io/blogs/blogs/2013/12/02/linux-bridge-virtual-networking/&#34;&gt;earlier blog&lt;/a&gt;, I have talked about Linux bridge based virtual networking. Recently as part of a comment on my blog, I learnt how to view and interpret the MAC table of Linux bridge. In this installment of WILT (What I Learnt Today) series, I will share how MAC Table can be used for troubleshooting Linux bridges.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>OpenStack Neutron – the components</title>
      <link>http://reachsrirams.github.io/blogs/2015/01/13/openstack-neutron-components/</link>
      <pubDate>Tue, 13 Jan 2015 18:20:22 +0000</pubDate>
      
      <guid>http://reachsrirams.github.io/blogs/2015/01/13/openstack-neutron-components/</guid>
      <description>&lt;p&gt;Neutron is the networking project within the OpenStack cloud platform. The purpose of OpenStack Neutron is to provide physical and virtual network resources to the instances (or virtual machines). Before you continue to read this article I would recommend that you read about &lt;a href=&#34;http://reachsrirams.github.io/blogs/blogs/2014/04/06/openstack-networking/&#34;&gt;OpenStack networking concepts&lt;/a&gt;. To appreciate the architecture and the functionality of Neutron, it is important to understand the components that are part of Neutron.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Use Google Calendar to remind you to read</title>
      <link>http://reachsrirams.github.io/blogs/2014/12/31/use-google-calendar-to-remind-reading/</link>
      <pubDate>Wed, 31 Dec 2014 09:38:31 +0000</pubDate>
      
      <guid>http://reachsrirams.github.io/blogs/2014/12/31/use-google-calendar-to-remind-reading/</guid>
      <description>Have you come across a situation when you want to continue reading an interesting online article but do not have enough time? Have you felt the need to add a &amp;ldquo;reminder to read it later&amp;rdquo; and block out specific time on your calendar? If the answer to these questions is a Yes, then I will show a simple way to do this using Google Calendar.
Before I give a step by step guide to adding a URL to Google Calendar, here are some details about the solution:</description>
    </item>
    
    <item>
      <title>Linux Network Namespace – WILT</title>
      <link>http://reachsrirams.github.io/blogs/2014/12/17/linux-network-namespace-wilt/</link>
      <pubDate>Wed, 17 Dec 2014 18:05:29 +0000</pubDate>
      
      <guid>http://reachsrirams.github.io/blogs/2014/12/17/linux-network-namespace-wilt/</guid>
      <description>&lt;p&gt;In the next installment of &amp;ldquo;What I learnt today&amp;rdquo; or WILT, I briefly touch upon Network Namespace. I came across Namespace as part of my ongoing study of OpenStack networking. Namespaces are powerful constructs in Linux that allows you to create a &lt;strong&gt;copy of the TCP/IP network stack -all the way from the Ethernet interfaces (L2), routing tables etc.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Setting up OpenStack at home</title>
      <link>http://reachsrirams.github.io/blogs/2014/11/13/setting-openstack-home/</link>
      <pubDate>Thu, 13 Nov 2014 18:26:12 +0000</pubDate>
      
      <guid>http://reachsrirams.github.io/blogs/2014/11/13/setting-openstack-home/</guid>
      <description>The goal of this blog is to share some details about how I have setup a cost-effective OpenStack Lab at home. For most enthusiasts, DevStack is the preferred way to experiment with OpenStack. But I wanted something more realistic for my experiments.
OpenStack is intended for multi-tenant, distributed and highly scalable cloud. To appreciate its architecture I needed to move beyond DevStack. With a more realistic setup, you can understand how the distributed OpenStack components interact with each other.</description>
    </item>
    
    <item>
      <title>Wired and Wireless network on Ubuntu for OpenStack</title>
      <link>http://reachsrirams.github.io/blogs/2014/06/29/wired-wireless-network-ubuntu-openstack/</link>
      <pubDate>Sun, 29 Jun 2014 18:16:37 +0000</pubDate>
      
      <guid>http://reachsrirams.github.io/blogs/2014/06/29/wired-wireless-network-ubuntu-openstack/</guid>
      <description>&lt;p&gt;In data center and cloud environment, servers used for hosting the virtual machines usually have more than one wired networking interfaces. In fact there are multiple Ethernet interfaces on each server. It is common practice to use one of the interface for &amp;lsquo;managing&amp;rsquo; the host itself. This interface is usually accessible from corporate networks and administrators will use this interface for doing SSH into the server. The other interfaces are usually used for virtual machine traffic or storage traffic.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Intel NUC DN2820FYKH Review</title>
      <link>http://reachsrirams.github.io/blogs/2014/06/09/intel-nuc-dn2820fykh-review/</link>
      <pubDate>Mon, 09 Jun 2014 05:46:04 +0000</pubDate>
      
      <guid>http://reachsrirams.github.io/blogs/2014/06/09/intel-nuc-dn2820fykh-review/</guid>
      <description>Most of us have &amp;ldquo;cloud storage&amp;rdquo; accounts to keep our important files backed up in a central location and yet be accessible across devices. But these accounts have limits unless you are willing to shell out more money. Also the network traffic for big files will eat up into your monthly broadband quota (especially in India). Therefore it is still common to have a &amp;ldquo;backup&amp;rdquo; store at home. Most people are probably using USB hard disk drives for this.</description>
    </item>
    
  </channel>
</rss>